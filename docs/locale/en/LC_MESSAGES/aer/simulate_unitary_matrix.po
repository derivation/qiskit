# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, Qiskit Development Team
# This file is distributed under the same license as the Qiskit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Qiskit \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-12 14:30+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../aer/simulate_unitary_matrix.rst:3
msgid "Find the Unitary Matrix for a Circuit"
msgstr ""

#: ../../aer/simulate_unitary_matrix.rst:6
msgid "Introduction"
msgstr ""

#: ../../aer/simulate_unitary_matrix.rst:8
msgid ""
"This tutorial shows how to use Qiskit Aerâ„¢ to find the unitary matrix of "
"quantum circuits."
msgstr ""

#: ../../aer/simulate_unitary_matrix.rst:12
msgid "UnitarySimulator"
msgstr ""

#: ../../aer/simulate_unitary_matrix.rst:14
msgid ""
"The ``UnitarySimulator`` constructs the unitary matrix for a Qiskit "
"``QuantumCircuit`` by applying each gate matrix to an identity matrix. "
"The circuit may only contain *gates*, if it contains *resets* or "
"*measure* operations an exception will be raised."
msgstr ""

#: ../../aer/simulate_unitary_matrix.rst:19
msgid "Import the ``UnitarySimulator``."
msgstr ""

#: ../../aer/simulate_unitary_matrix.rst:31
msgid "Simulating a quantum circuit unitary"
msgstr ""

#: ../../aer/simulate_unitary_matrix.rst:33
msgid ""
"For this example we will return the unitary matrix corresponding to the "
"previous examples circuit which prepares a bell state."
msgstr ""

#: ../../aer/simulate_unitary_matrix.rst:63
msgid "Setting a custom initial unitary"
msgstr ""

#: ../../aer/simulate_unitary_matrix.rst:65
msgid ""
"we may also set an initial state for the ``UnitarySimulator``, however "
"this state is an initial *unitary matrix* :math:`U_i`, not a statevector."
" In this case the return unitary will be :math:`U.U_i` given by applying "
"the circuit unitary to the initial unitary matrix."
msgstr ""

#: ../../aer/simulate_unitary_matrix.rst:70
msgid ""
"**Note:** \\* The initial unitary must be a valid unitary matrix "
":math:`U^\\dagger.U =\\mathbb{1}`. If not an exception will be raised. "
"\\* If a Qobj contains multiple experiments, the initial unitary must be "
"the correct size fo *all* experiments in the Qobj, otherwise an exception"
" will be raised."
msgstr ""

#: ../../aer/simulate_unitary_matrix.rst:76
msgid ""
"Let us consider preparing the output unitary of the previous circuit as "
"the initial state for the simulator:"
msgstr ""

