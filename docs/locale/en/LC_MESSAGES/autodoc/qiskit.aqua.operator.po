# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, Qiskit Development Team
# This file is distributed under the same license as the Qiskit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Qiskit \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-12 14:30+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../autodoc/qiskit.aqua.operator.rst:2
msgid "qiskit.aqua.operator module"
msgstr ""

#: of qiskit.aqua.operator.Operator:1
msgid "ベースクラス: :class:`object`"
msgstr ""

#: of qiskit.aqua.operator.Operator:1
msgid "Operators relevant for quantum applications"
msgstr ""

#: of qiskit.aqua.operator.Operator:5
msgid ""
"For grouped paulis representation, all operations will always convert it "
"to paulis and then convert it back. (It might be a performance issue.)"
msgstr ""

#: of qiskit.aqua.operator.Operator.chop:1
msgid ""
"Eliminate the real and imagine part of coeff in each pauli by "
"`threshold`. If pauli's coeff is less then `threshold` in both real and "
"imagine parts, the pauli is removed. To align the internal "
"representations, all available representations are chopped. The chopped "
"result is stored back to original property. Note: if coeff is real-only, "
"the imag part is skipped."
msgstr ""

#: of qiskit.aqua.operator.Operator.chop
#: qiskit.aqua.operator.Operator.construct_evaluation_circuit
#: qiskit.aqua.operator.Operator.construct_evolution_circuit
#: qiskit.aqua.operator.Operator.convert qiskit.aqua.operator.Operator.eval
#: qiskit.aqua.operator.Operator.evaluate_with_result
#: qiskit.aqua.operator.Operator.evolve qiskit.aqua.operator.Operator.kernel_F2
#: qiskit.aqua.operator.Operator.load_from_file
#: qiskit.aqua.operator.Operator.print_operators
#: qiskit.aqua.operator.Operator.qubit_tapering
#: qiskit.aqua.operator.Operator.row_echelon_F2
#: qiskit.aqua.operator.Operator.save_to_file
#: qiskit.aqua.operator.Operator.scaling_coeff
#: qiskit.aqua.operator.Operator.two_qubit_reduced_operator
msgid "パラメータ"
msgstr ""

#: of qiskit.aqua.operator.Operator.chop:7
msgid "threshold chops the paulis"
msgstr ""

#: of qiskit.aqua.operator.Operator.coloring:1
msgid "Getter of method of grouping paulis"
msgstr ""

#: of qiskit.aqua.operator.Operator.construct_evaluation_circuit:1
msgid "Construct the circuits for evaluation."
msgstr ""

#: of qiskit.aqua.operator.Operator.construct_evaluation_circuit:3
#: qiskit.aqua.operator.Operator.eval:6
#: qiskit.aqua.operator.Operator.evaluate_with_result:3
msgid "representation of operator, including paulis, grouped_paulis and matrix"
msgstr ""

#: of qiskit.aqua.operator.Operator.construct_evaluation_circuit:5
#: qiskit.aqua.operator.Operator.eval:8
msgid "the quantum circuit."
msgstr ""

#: of qiskit.aqua.operator.Operator.construct_evaluation_circuit:7
#: qiskit.aqua.operator.Operator.eval:10
#: qiskit.aqua.operator.Operator.evaluate_with_result:7
msgid "backend selection for quantum machine."
msgstr ""

#: of qiskit.aqua.operator.Operator.construct_evaluation_circuit:9
#: qiskit.aqua.operator.Operator.evaluate_with_result:11
msgid ""
"if aer_provider is used, we can do faster evaluation for pauli mode on "
"statevector simualtion"
msgstr ""

#: of qiskit.aqua.operator.Operator.construct_evaluation_circuit
#: qiskit.aqua.operator.Operator.construct_evolution_circuit
#: qiskit.aqua.operator.Operator.eval
#: qiskit.aqua.operator.Operator.evaluate_with_result
#: qiskit.aqua.operator.Operator.evolve
#: qiskit.aqua.operator.Operator.find_Z2_symmetries
#: qiskit.aqua.operator.Operator.get_flat_pauli_list
#: qiskit.aqua.operator.Operator.is_empty
#: qiskit.aqua.operator.Operator.kernel_F2
#: qiskit.aqua.operator.Operator.load_from_dict
#: qiskit.aqua.operator.Operator.load_from_file
#: qiskit.aqua.operator.Operator.num_qubits
#: qiskit.aqua.operator.Operator.print_operators
#: qiskit.aqua.operator.Operator.qubit_tapering
#: qiskit.aqua.operator.Operator.representations
#: qiskit.aqua.operator.Operator.row_echelon_F2
#: qiskit.aqua.operator.Operator.save_to_dict
#: qiskit.aqua.operator.Operator.two_qubit_reduced_operator
msgid "戻り値"
msgstr ""

#: of qiskit.aqua.operator.Operator.construct_evaluation_circuit:13
msgid "the circuits for evaluation."
msgstr ""

#: of qiskit.aqua.operator.Operator.construct_evaluation_circuit
#: qiskit.aqua.operator.Operator.construct_evolution_circuit
#: qiskit.aqua.operator.Operator.eval
#: qiskit.aqua.operator.Operator.evaluate_with_result
#: qiskit.aqua.operator.Operator.find_Z2_symmetries
#: qiskit.aqua.operator.Operator.get_flat_pauli_list
#: qiskit.aqua.operator.Operator.is_empty
#: qiskit.aqua.operator.Operator.kernel_F2
#: qiskit.aqua.operator.Operator.load_from_dict
#: qiskit.aqua.operator.Operator.load_from_file
#: qiskit.aqua.operator.Operator.num_qubits
#: qiskit.aqua.operator.Operator.print_operators
#: qiskit.aqua.operator.Operator.qubit_tapering
#: qiskit.aqua.operator.Operator.representations
#: qiskit.aqua.operator.Operator.row_echelon_F2
#: qiskit.aqua.operator.Operator.save_to_dict
#: qiskit.aqua.operator.Operator.two_qubit_reduced_operator
msgid "戻り値の型"
msgstr ""

#: of qiskit.aqua.operator.Operator.construct_evolution_circuit:1
msgid "Construct the evolution circuit according to the supplied specification."
msgstr ""

#: of qiskit.aqua.operator.Operator.construct_evolution_circuit:3
msgid "The list of pauli terms corresponding to a single time slice to be evolved"
msgstr ""

#: of qiskit.aqua.operator.Operator.construct_evolution_circuit:5
#: qiskit.aqua.operator.Operator.evolve:4
msgid "The evolution time"
msgstr ""

#: of qiskit.aqua.operator.Operator.construct_evolution_circuit:7
#: qiskit.aqua.operator.Operator.evolve:9
msgid "The number of time slices for the expansion"
msgstr ""

#: of qiskit.aqua.operator.Operator.construct_evolution_circuit:9
msgid "The Qiskit QuantumRegister corresponding to the qubits of the system"
msgstr ""

#: of qiskit.aqua.operator.Operator.construct_evolution_circuit:11
msgid ""
"The optional Qiskit QuantumRegister corresponding to the control qubits "
"for the state_registers of the system"
msgstr ""

#: of qiskit.aqua.operator.Operator.construct_evolution_circuit:14
msgid "The index of the qubit of the control ancillary_registers to use"
msgstr ""

#: of qiskit.aqua.operator.Operator.construct_evolution_circuit:16
msgid "The power to which the unitary operator is to be raised"
msgstr ""

#: of qiskit.aqua.operator.Operator.construct_evolution_circuit:18
msgid "boolean flag for indicating only using basis gates when building circuit."
msgstr ""

#: of qiskit.aqua.operator.Operator.construct_evolution_circuit:20
msgid ""
"boolean flag for indicating using shallow qc.data reference repetition "
"for slicing"
msgstr ""

#: of qiskit.aqua.operator.Operator.construct_evolution_circuit:23
msgid "The Qiskit QuantumCircuit corresponding to specified evolution."
msgstr ""

#: of qiskit.aqua.operator.Operator.convert:1
msgid ""
"A wrapper for conversion among all representations. Note that, if the "
"output target is already there, it will skip the conversion. The result "
"is stored back into its property directly."
msgstr ""

#: of qiskit.aqua.operator.Operator.convert:5
msgid ""
"case-insensitive input format, should be one of \"paulis\", "
"\"grouped_paulis\", \"matrix\""
msgstr ""

#: of qiskit.aqua.operator.Operator.convert:8
msgid ""
"case-insensitive output format, should be one of \"paulis\", "
"\"grouped_paulis\", \"matrix\""
msgstr ""

#: of qiskit.aqua.operator.Operator.convert:11
msgid "convert to targeted format regardless its present."
msgstr ""

#: of qiskit.aqua.operator.Operator.convert
#: qiskit.aqua.operator.Operator.print_operators
msgid "raises"
msgstr ""

#: of qiskit.aqua.operator.Operator.convert:14
msgid ":exc:`ValueError` -- if the unsupported output_format is specified."
msgstr ""

#: of qiskit.aqua.operator.Operator.copy:1
msgid "Get a copy of self."
msgstr ""

#: of qiskit.aqua.operator.Operator.eval:1
msgid ""
"Supporting three ways to evaluate the given circuits with the operator. "
"1. If `input_circuit` is a numpy.ndarray, it will directly perform inner "
"product with the operator. 2. If `backend` is a statevector simulator, "
"use quantum backend to get statevector            and then evaluate with "
"the operator. 3. Other cases: it use with quanutm backend (simulator or "
"real quantum machine),            to obtain the mean and standard "
"deviation of measured results."
msgstr ""

#: of qiskit.aqua.operator.Operator.eval:12
msgid "configuration for backend"
msgstr ""

#: of qiskit.aqua.operator.Operator.eval:14
msgid "configuration for compilation"
msgstr ""

#: of qiskit.aqua.operator.Operator.eval:16
msgid "configuration for running a circuit"
msgstr ""

#: of qiskit.aqua.operator.Operator.eval:18
msgid ""
"the setting to retrieve results from quantum backend, including timeout "
"and wait."
msgstr ""

#: of qiskit.aqua.operator.Operator.eval:23
msgid "mean and standard deviation of avg"
msgstr ""

#: of qiskit.aqua.operator.Operator.evaluate_with_result:1
msgid "Use the executed result with operator to get the evaluated value."
msgstr ""

#: of qiskit.aqua.operator.Operator.evaluate_with_result:5
msgid "the quantum circuits."
msgstr ""

#: of qiskit.aqua.operator.Operator.evaluate_with_result:9
msgid "the result from the backend."
msgstr ""

#: of qiskit.aqua.operator.Operator.evaluate_with_result:15
msgid "the mean value float: the standard deviation"
msgstr ""

#: of qiskit.aqua.operator.Operator.evolve:1
msgid ""
"Carry out the eoh evolution for the operator under supplied "
"specifications."
msgstr ""

#: of qiskit.aqua.operator.Operator.evolve:3
msgid "The initial state for the evolution"
msgstr ""

#: of qiskit.aqua.operator.Operator.evolve:6
msgid ""
"The mode under which the evolution is carried out. Currently only support"
" 'matrix' or 'circuit'"
msgstr ""

#: of qiskit.aqua.operator.Operator.evolve:11
msgid "The QuantumRegister to build the QuantumCircuit off of"
msgstr ""

#: of qiskit.aqua.operator.Operator.evolve:13
msgid ""
"The mode under which the expansion is to be done. Currently support "
"'trotter', which follows the expansion as discussed in "
"http://science.sciencemag.org/content/273/5278/1073, and 'suzuki', which "
"corresponds to the discussion in https://arxiv.org/pdf/quant-"
"ph/0508139.pdf"
msgstr ""

#: of qiskit.aqua.operator.Operator.evolve:19
msgid "The order for suzuki expansion"
msgstr ""

#: of qiskit.aqua.operator.Operator.evolve:22
msgid ""
"Depending on the evo_mode specified, either return the matrix vector "
"multiplication result or the constructed QuantumCircuit."
msgstr ""

#: of qiskit.aqua.operator.Operator.find_Z2_symmetries:1
msgid "Finds Z2 Pauli-type symmetries of an Operator"
msgstr ""

#: of qiskit.aqua.operator.Operator.find_Z2_symmetries:3
msgid ""
"the list of Pauli objects representing the Z2 symmetries [Pauli]: the "
"list of single - qubit Pauli objects to construct the Cliffors operators "
"[Operators]: the list of Clifford unitaries to block diagonalize Operator"
" [int]: the list of support of the single-qubit Pauli objects used to "
"build the clifford operators"
msgstr ""

#: of qiskit.aqua.operator.Operator.get_flat_pauli_list:1
msgid "Get the flat list of paulis"
msgstr ""

#: of qiskit.aqua.operator.Operator.get_flat_pauli_list:3
msgid "The list of pauli terms"
msgstr ""

#: of qiskit.aqua.operator.Operator.grouped_paulis:1
msgid "Getter of grouped Pauli list."
msgstr ""

#: of qiskit.aqua.operator.Operator.is_empty:1
msgid "Check Operator is empty or not."
msgstr ""

#: of qiskit.aqua.operator.Operator.is_empty:3
msgid "is empty?"
msgstr ""

#: of qiskit.aqua.operator.Operator.kernel_F2:1
msgid "Computes the kernel of a binary matrix on the binary finite field"
msgstr ""

#: of qiskit.aqua.operator.Operator.kernel_F2:3
#: qiskit.aqua.operator.Operator.row_echelon_F2:4
msgid "binary matrix"
msgstr ""

#: of qiskit.aqua.operator.Operator.kernel_F2:6
msgid "the list of kernel vectors"
msgstr ""

#: of qiskit.aqua.operator.Operator.load_from_dict:1
msgid ""
"Load paulis in a dict to construct an Operator,         the dict must be "
"represented as follows: label and coeff (real and imag).         E.g.:"
"            {'paulis':                [                    {'label': "
"'IIII',                     'coeff': {'real': -0.33562957575267038, "
"'imag': 0.0}},                    {'label': 'ZIII',                     "
"'coeff': {'real': 0.28220597164664896, 'imag': 0.0}},"
"                     ...                 ]             } :param "
"dictionary: dictionary, which contains a list of Paulis and coefficients."
" :type dictionary: dict :param before_04: support the format < 0.4. :type"
" before_04: bool"
msgstr ""

#: of qiskit.aqua.operator.Operator.load_from_dict:7
#: qiskit.aqua.operator.Operator.load_from_file:8
msgid "the loaded operator."
msgstr ""

#: of qiskit.aqua.operator.Operator.load_from_file:1
msgid "Load paulis in a file to construct an Operator."
msgstr ""

#: of qiskit.aqua.operator.Operator.load_from_file:3
msgid "path to the file, which contains a list of Paulis and coefficients."
msgstr ""

#: of qiskit.aqua.operator.Operator.load_from_file:5
msgid "support the format < 0.4."
msgstr ""

#: of qiskit.aqua.operator.Operator.matrix:1
msgid ""
"Getter of matrix; if matrix is diagonal, diagonal matrix is returned "
"instead."
msgstr ""

#: of qiskit.aqua.operator.Operator.num_qubits:1
msgid "number of qubits required for the operator."
msgstr ""

#: of qiskit.aqua.operator.Operator.num_qubits:3
msgid "number of qubits"
msgstr ""

#: of qiskit.aqua.operator.Operator.paulis:1
msgid "Getter of Pauli list."
msgstr ""

#: of qiskit.aqua.operator.Operator.print_operators:1
msgid "Print out the paulis in the selected representation."
msgstr ""

#: of qiskit.aqua.operator.Operator.print_operators:3
msgid "\"paulis\", \"grouped_paulis\", \"matrix\""
msgstr ""

#: of qiskit.aqua.operator.Operator.print_operators:6
msgid "a formated operator."
msgstr ""

#: of qiskit.aqua.operator.Operator.print_operators:9
msgid ":exc:`ValueError` -- if `print_format` is not supported."
msgstr ""

#: of qiskit.aqua.operator.Operator.qubit_tapering:1
msgid ""
"Builds an Operator which has a number of qubits tapered off, based on a "
"block-diagonal Operator built using a list of cliffords. The block-"
"diagonal subspace is an input parameter, set through the list "
"tapering_values, which takes values +/- 1."
msgstr ""

#: of qiskit.aqua.operator.Operator.qubit_tapering:6
msgid "the target operator to be tapered"
msgstr ""

#: of qiskit.aqua.operator.Operator.qubit_tapering:8
msgid "list of unitary Clifford transformation"
msgstr ""

#: of qiskit.aqua.operator.Operator.qubit_tapering:10
msgid "position of the single-qubit operators that anticommute"
msgstr ""

#: of qiskit.aqua.operator.Operator.qubit_tapering:13
msgid "array of +/- 1 used to select the subspace. Length"
msgstr ""

#: of qiskit.aqua.operator.Operator.qubit_tapering:17
msgid "the tapered operator, or empty operator if the `operator` is empty."
msgstr ""

#: of qiskit.aqua.operator.Operator.representations:1
msgid "Return the available representations in the Operator."
msgstr ""

#: of qiskit.aqua.operator.Operator.representations:3
msgid "available representations ([str])"
msgstr ""

#: of qiskit.aqua.operator.Operator.row_echelon_F2:1
msgid ""
"Computes the row Echelon form of a binary matrix on the binary finite "
"field"
msgstr ""

#: of qiskit.aqua.operator.Operator.row_echelon_F2:7
msgid "matrix_in in Echelon row form"
msgstr ""

#: of qiskit.aqua.operator.Operator.save_to_dict:1
msgid "Save operator to a dict in pauli representation."
msgstr ""

#: of qiskit.aqua.operator.Operator.save_to_dict:3
msgid "a dictionary contains an operator with pauli representation."
msgstr ""

#: of qiskit.aqua.operator.Operator.save_to_file:1
msgid "Save operator to a file in pauli representation."
msgstr ""

#: of qiskit.aqua.operator.Operator.save_to_file:3
msgid "path to the file"
msgstr ""

#: of qiskit.aqua.operator.Operator.scaling_coeff:1
msgid "Constant scale the coefficient in an operator."
msgstr ""

#: of qiskit.aqua.operator.Operator.scaling_coeff:3
msgid ""
"Note that: the behavior of scaling in paulis (grouped_paulis) might be "
"different from matrix"
msgstr ""

#: of qiskit.aqua.operator.Operator.scaling_coeff:5
msgid "the sacling factor"
msgstr ""

#: of qiskit.aqua.operator.Operator.two_qubit_reduced_operator:1
msgid ""
"Eliminates the central and last qubit in a list of Pauli that has "
"diagonal operators (Z,I) at those positions"
msgstr ""

#: of qiskit.aqua.operator.Operator.two_qubit_reduced_operator:4
msgid ""
"Chemistry specific method: It can be used to taper two qubits in parity "
"and binary-tree mapped fermionic Hamiltonians when the spin orbitals are "
"ordered in two spin sectors, (block spin order) according to the number "
"of particles in the system."
msgstr ""

#: of qiskit.aqua.operator.Operator.two_qubit_reduced_operator:9
msgid "number of fermionic particles"
msgstr ""

#: of qiskit.aqua.operator.Operator.two_qubit_reduced_operator:11
msgid "threshold for Pauli simplification"
msgstr ""

#: of qiskit.aqua.operator.Operator.two_qubit_reduced_operator:14
msgid "a new operator whose qubit number is reduced by 2."
msgstr ""

#: of qiskit.aqua.operator.Operator.zeros_coeff_elimination:1
msgid "Elinminate paulis or grouped paulis whose coefficients are zeros."
msgstr ""

#: of qiskit.aqua.operator.Operator.zeros_coeff_elimination:3
msgid ""
"The difference from `_simplify_paulis` method is that, this method will "
"not remove duplicated paulis."
msgstr ""

