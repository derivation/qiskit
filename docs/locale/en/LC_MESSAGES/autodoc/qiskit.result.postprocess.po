# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, Qiskit Development Team
# This file is distributed under the same license as the Qiskit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Qiskit \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-12 14:30+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../autodoc/qiskit.result.postprocess.rst:2
msgid "qiskit.result.postprocess module"
msgstr ""

#: of qiskit.result.postprocess:1
msgid "Post-processing of raw result."
msgstr ""

#: of qiskit.result.postprocess.format_counts:1
msgid ""
"Format a single experiment result coming from backend to present to the "
"Qiskit user."
msgstr ""

#: of qiskit.result.postprocess.format_counts
#: qiskit.result.postprocess.format_counts_memory
#: qiskit.result.postprocess.format_level_0_memory
#: qiskit.result.postprocess.format_level_1_memory
#: qiskit.result.postprocess.format_level_2_memory
#: qiskit.result.postprocess.format_statevector
#: qiskit.result.postprocess.format_unitary
msgid "パラメータ"
msgstr ""

#: of qiskit.result.postprocess.format_counts:4
msgid "counts histogram of multiple shots"
msgstr ""

#: of qiskit.result.postprocess.format_counts:6
#: qiskit.result.postprocess.format_level_2_memory:5
msgid ""
"the experiment header dictionary containing useful information for "
"postprocessing."
msgstr ""

#: of qiskit.result.postprocess.format_counts
#: qiskit.result.postprocess.format_counts_memory
#: qiskit.result.postprocess.format_level_0_memory
#: qiskit.result.postprocess.format_level_1_memory
#: qiskit.result.postprocess.format_level_2_memory
#: qiskit.result.postprocess.format_statevector
#: qiskit.result.postprocess.format_unitary
msgid "戻り値"
msgstr ""

#: of qiskit.result.postprocess.format_counts:10
msgid "a formatted counts"
msgstr ""

#: of qiskit.result.postprocess.format_counts
#: qiskit.result.postprocess.format_counts_memory
#: qiskit.result.postprocess.format_level_0_memory
#: qiskit.result.postprocess.format_level_1_memory
#: qiskit.result.postprocess.format_level_2_memory
#: qiskit.result.postprocess.format_statevector
#: qiskit.result.postprocess.format_unitary
msgid "戻り値の型"
msgstr ""

#: of qiskit.result.postprocess.format_counts_memory:1
msgid "Format a single bitstring (memory) from a single shot experiment."
msgstr ""

#: of qiskit.result.postprocess.format_counts_memory:3
msgid "The hexadecimals are expanded to bitstrings"
msgstr ""

#: of qiskit.result.postprocess.format_counts_memory:5
msgid "Spaces are inserted at register divisions."
msgstr ""

#: of qiskit.result.postprocess.format_counts_memory:7
msgid "result of a single experiment."
msgstr ""

#: of qiskit.result.postprocess.format_counts_memory:9
msgid ""
"the experiment header dictionary containing useful information for "
"postprocessing. creg_sizes are a nested list where the inner element is a"
" list of creg name, creg size pairs. memory_slots is an integers "
"specifying the number of total memory_slots in the experiment."
msgstr ""

#: of qiskit.result.postprocess.format_counts_memory:16
msgid "a formatted memory"
msgstr ""

#: of qiskit.result.postprocess.format_level_0_memory:1
msgid "Format an experiment result memory object for measurement level 0."
msgstr ""

#: of qiskit.result.postprocess.format_level_0_memory:3
#: qiskit.result.postprocess.format_level_1_memory:3
msgid ""
"Memory from experiment with `meas_level==1`. `avg` or `single` will be "
"inferred from shape of result memory."
msgstr ""

#: of qiskit.result.postprocess.format_level_0_memory:7
msgid "Measurement level 0 complex numpy array"
msgstr ""

#: of qiskit.result.postprocess.format_level_0_memory
#: qiskit.result.postprocess.format_level_1_memory
msgid "raises"
msgstr ""

#: of qiskit.result.postprocess.format_level_0_memory:10
msgid ""
":exc:`QiskitError` -- If the returned numpy array does not have 2 (avg) "
"or 3 (single) indicies."
msgstr ""

#: of qiskit.result.postprocess.format_level_1_memory:1
msgid "Format an experiment result memory object for measurement level 1."
msgstr ""

#: of qiskit.result.postprocess.format_level_1_memory:7
msgid "Measurement level 1 complex numpy array"
msgstr ""

#: of qiskit.result.postprocess.format_level_1_memory:10
msgid ""
":exc:`QiskitError` -- If the returned numpy array does not have 1 (avg) "
"or 2 (single) indicies."
msgstr ""

#: of qiskit.result.postprocess.format_level_2_memory:1
msgid "Format an experiment result memory object for measurement level 2."
msgstr ""

#: of qiskit.result.postprocess.format_level_2_memory:3
msgid "Memory from experiment with `meas_level==2` and `memory==True`."
msgstr ""

#: of qiskit.result.postprocess.format_level_2_memory:9
msgid "List of bitstrings"
msgstr ""

#: of qiskit.result.postprocess.format_statevector:1
msgid "Format statevector coming from the backend to present to the Qiskit user."
msgstr ""

#: of qiskit.result.postprocess.format_statevector:3
msgid "a list of [re, im] complex numbers."
msgstr ""

#: of qiskit.result.postprocess.format_statevector:5
#: qiskit.result.postprocess.format_unitary:5
msgid "the number of decimals in the statevector. If None, no rounding is done."
msgstr ""

#: of qiskit.result.postprocess.format_statevector:9
msgid "a list of python complex numbers."
msgstr ""

#: of qiskit.result.postprocess.format_unitary:1
msgid "Format unitary coming from the backend to present to the Qiskit user."
msgstr ""

#: of qiskit.result.postprocess.format_unitary:3
msgid "a list of list of [re, im] complex numbers"
msgstr ""

#: of qiskit.result.postprocess.format_unitary:9
msgid "a matrix of complex numbers"
msgstr ""

