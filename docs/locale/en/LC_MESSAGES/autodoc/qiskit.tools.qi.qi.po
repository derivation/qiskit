# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, Qiskit Development Team
# This file is distributed under the same license as the Qiskit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Qiskit \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-12 14:30+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../autodoc/qiskit.tools.qi.qi.rst:2
msgid "qiskit.tools.qi.qi module"
msgstr ""

#: of qiskit.tools.qi.qi:1
msgid "A collection of useful quantum information functions."
msgstr ""

#: of qiskit.tools.qi.qi:3
msgid ""
"Currently this file is very sparse. More functions will be added over "
"time."
msgstr ""

#: of qiskit.tools.qi.qi.choi_to_rauli:1
msgid "Convert a Choi-matrix to a Pauli-basis superoperator."
msgstr ""

#: of qiskit.tools.qi.qi.choi_to_rauli:3
msgid ""
"Note that this function assumes that the Choi-matrix is defined in the "
"standard column-stacking convention and is normalized to have trace 1. "
"For a channel E this is defined as: choi = (I \\otimes E)(bell_state)."
msgstr ""

#: of qiskit.tools.qi.qi.choi_to_rauli:8
msgid ""
"The resulting 'rauli' R acts on input states as |rho_out>_p = "
"R.|rho_in>_p where |rho> = vectorize(rho, method='pauli') for order=1 and"
" |rho> = vectorize(rho, method='pauli_weights') for order=0."
msgstr ""

#: of qiskit.tools.qi.qi.choi_to_rauli qiskit.tools.qi.qi.chop
#: qiskit.tools.qi.qi.concurrence qiskit.tools.qi.qi.devectorize
#: qiskit.tools.qi.qi.entanglement_of_formation qiskit.tools.qi.qi.entropy
#: qiskit.tools.qi.qi.mutual_information qiskit.tools.qi.qi.outer
#: qiskit.tools.qi.qi.partial_trace qiskit.tools.qi.qi.purity
#: qiskit.tools.qi.qi.shannon_entropy qiskit.tools.qi.qi.vectorize
msgid "パラメータ"
msgstr ""

#: of qiskit.tools.qi.qi.choi_to_rauli:13
msgid "the input Choi-matrix."
msgstr ""

#: of qiskit.tools.qi.qi.choi_to_rauli:15
msgid ""
"ordering of the Pauli group vector. order=1 (default) is standard "
"lexicographic ordering.     Eg: [II, IX, IY, IZ, XI, XX, XY,...] order=0 "
"is ordered by weights.     Eg. [II, IX, IY, IZ, XI, XY, XZ, XX, XY,...]"
msgstr ""

#: of qiskit.tools.qi.qi.choi_to_rauli:15
msgid ""
"ordering of the Pauli group vector. order=1 (default) is standard "
"lexicographic ordering."
msgstr ""

#: of qiskit.tools.qi.qi.choi_to_rauli:17
msgid "Eg: [II, IX, IY, IZ, XI, XX, XY,...]"
msgstr ""

#: of qiskit.tools.qi.qi.choi_to_rauli:18
msgid "order=0 is ordered by weights."
msgstr ""

#: of qiskit.tools.qi.qi.choi_to_rauli:19
msgid "Eg. [II, IX, IY, IZ, XI, XY, XZ, XX, XY,...]"
msgstr ""

#: of qiskit.tools.qi.qi.choi_to_rauli qiskit.tools.qi.qi.chop
#: qiskit.tools.qi.qi.concurrence qiskit.tools.qi.qi.devectorize
#: qiskit.tools.qi.qi.entanglement_of_formation qiskit.tools.qi.qi.entropy
#: qiskit.tools.qi.qi.mutual_information qiskit.tools.qi.qi.outer
#: qiskit.tools.qi.qi.partial_trace qiskit.tools.qi.qi.purity
#: qiskit.tools.qi.qi.shannon_entropy qiskit.tools.qi.qi.vectorize
msgid "戻り値"
msgstr ""

#: of qiskit.tools.qi.qi.choi_to_rauli:22
msgid "A superoperator in the Pauli basis."
msgstr ""

#: of qiskit.tools.qi.qi.choi_to_rauli qiskit.tools.qi.qi.chop
#: qiskit.tools.qi.qi.concurrence qiskit.tools.qi.qi.devectorize
#: qiskit.tools.qi.qi.entanglement_of_formation qiskit.tools.qi.qi.entropy
#: qiskit.tools.qi.qi.mutual_information qiskit.tools.qi.qi.outer
#: qiskit.tools.qi.qi.partial_trace qiskit.tools.qi.qi.purity
#: qiskit.tools.qi.qi.shannon_entropy qiskit.tools.qi.qi.vectorize
msgid "戻り値の型"
msgstr ""

#: of qiskit.tools.qi.qi.chop:1
msgid "Truncate small values of a complex array."
msgstr ""

#: of qiskit.tools.qi.qi.chop:3
msgid "array to truncte small values."
msgstr ""

#: of qiskit.tools.qi.qi.chop:5
msgid "threshold."
msgstr ""

#: of qiskit.tools.qi.qi.chop:8
msgid "A new operator with small values set to zero."
msgstr ""

#: of qiskit.tools.qi.qi.concurrence:1
msgid "Calculate the concurrence."
msgstr ""

#: of qiskit.tools.qi.qi.concurrence:3
msgid "a quantum state (1x4 array) or a density matrix (4x4 array)"
msgstr ""

#: of qiskit.tools.qi.qi.concurrence:7
msgid "concurrence."
msgstr ""

#: of qiskit.tools.qi.qi.concurrence qiskit.tools.qi.qi.devectorize
#: qiskit.tools.qi.qi.partial_trace qiskit.tools.qi.qi.vectorize
msgid "raises"
msgstr ""

#: of qiskit.tools.qi.qi.concurrence:10
msgid ":exc:`Exception` -- if attempted on more than two qubits."
msgstr ""

#: of qiskit.tools.qi.qi.devectorize:1
msgid "Devectorize a vectorized square matrix."
msgstr ""

#: of qiskit.tools.qi.qi.devectorize:3
msgid "a vectorized density matrix."
msgstr ""

#: of qiskit.tools.qi.qi.devectorize:5
msgid ""
"the method of devectorization. Allowed values are - 'col' (default): "
"flattens to column-major vector. - 'row': flattens to row-major vector. -"
" 'pauli': flattens in the n-qubit Pauli basis. - 'pauli-weights': "
"flattens in the n-qubit Pauli basis ordered by    weight."
msgstr ""

#: of qiskit.tools.qi.qi.devectorize:5
msgid ""
"the method of devectorization. Allowed values are - 'col' (default): "
"flattens to column-major vector. - 'row': flattens to row-major vector. -"
" 'pauli': flattens in the n-qubit Pauli basis. - 'pauli-weights': "
"flattens in the n-qubit Pauli basis ordered by"
msgstr ""

#: of qiskit.tools.qi.qi.devectorize:10 qiskit.tools.qi.qi.vectorize:10
msgid "weight."
msgstr ""

#: of qiskit.tools.qi.qi.devectorize:13
msgid "the resulting matrix."
msgstr ""

#: of qiskit.tools.qi.qi.devectorize:16 qiskit.tools.qi.qi.vectorize:16
msgid ":exc:`Exception` -- if input state is not a n-qubit state"
msgstr ""

#: of qiskit.tools.qi.qi.entanglement_of_formation:1
msgid "Compute the entanglement of formation of quantum state."
msgstr ""

#: of qiskit.tools.qi.qi.entanglement_of_formation:3
msgid ""
"The input quantum state must be either a bipartite state vector, or a "
"2-qubit density matrix."
msgstr ""

#: of qiskit.tools.qi.qi.entanglement_of_formation:6
msgid "(N) array_like or (4,4) array_like, a bipartite quantum state."
msgstr ""

#: of qiskit.tools.qi.qi.entanglement_of_formation:10
msgid "the dimension of the first subsystem."
msgstr ""

#: of qiskit.tools.qi.qi.entanglement_of_formation:12
msgid "the dimension of the second subsystem."
msgstr ""

#: of qiskit.tools.qi.qi.entanglement_of_formation:15
msgid "The entanglement of formation."
msgstr ""

#: of qiskit.tools.qi.qi.entropy:1
msgid "Compute the von-Neumann entropy of a quantum state."
msgstr ""

#: of qiskit.tools.qi.qi.entropy:3
msgid "a density matrix or state vector."
msgstr ""

#: of qiskit.tools.qi.qi.entropy:6
msgid "The von-Neumann entropy S(rho)."
msgstr ""

#: of qiskit.tools.qi.qi.is_pos_def:1
msgid "Return is_pos_def."
msgstr ""

#: of qiskit.tools.qi.qi.mutual_information:1
msgid "Compute the mutual information of a bipartite state."
msgstr ""

#: of qiskit.tools.qi.qi.mutual_information:3
msgid "a bipartite state-vector or density-matrix."
msgstr ""

#: of qiskit.tools.qi.qi.mutual_information:5
msgid "dimension of the first subsystem."
msgstr ""

#: of qiskit.tools.qi.qi.mutual_information:7
msgid "dimension of the second subsystem."
msgstr ""

#: of qiskit.tools.qi.qi.mutual_information:10
msgid "The mutual information S(rho_A) + S(rho_B) - S(rho_AB)."
msgstr ""

#: of qiskit.tools.qi.qi.outer:1
msgid "Construct the outer product of two vectors."
msgstr ""

#: of qiskit.tools.qi.qi.outer:3
msgid ""
"The second vector argument is optional, if absent the projector of the "
"first vector will be returned."
msgstr ""

#: of qiskit.tools.qi.qi.outer:6
msgid "the first vector."
msgstr ""

#: of qiskit.tools.qi.qi.outer:8
msgid "the (optional) second vector."
msgstr ""

#: of qiskit.tools.qi.qi.outer:11
msgid "The matrix |v1><v2|."
msgstr ""

#: of qiskit.tools.qi.qi.partial_trace:1
msgid "Partial trace over subsystems of multi-partite matrix."
msgstr ""

#: of qiskit.tools.qi.qi.partial_trace:3
msgid "Note that subsystems are ordered as rho012 = rho0(x)rho1(x)rho2."
msgstr ""

#: of qiskit.tools.qi.qi.partial_trace:5
msgid "a matrix NxN"
msgstr ""

#: of qiskit.tools.qi.qi.partial_trace:7
msgid "a list of subsystems (starting from 0) to trace over."
msgstr ""

#: of qiskit.tools.qi.qi.partial_trace:10
msgid ""
"a list of the dimensions of the subsystems. If this is not set it will "
"assume all subsystems are qubits."
msgstr ""

#: of qiskit.tools.qi.qi.partial_trace:14
msgid ""
"ordering of systems in operator. If True system-0 is the right most "
"system in tensor product. If False system-0 is the left most system in "
"tensor product."
msgstr ""

#: of qiskit.tools.qi.qi.partial_trace:19
msgid "A density matrix with the appropriate subsystems traced     over."
msgstr ""

#: of qiskit.tools.qi.qi.partial_trace:21
msgid "A density matrix with the appropriate subsystems traced"
msgstr ""

#: of qiskit.tools.qi.qi.partial_trace:22
msgid "over."
msgstr ""

#: of qiskit.tools.qi.qi.partial_trace:25
msgid ":exc:`Exception` -- if input is not a multi-qubit state."
msgstr ""

#: of qiskit.tools.qi.qi.purity:1
msgid "Calculate the purity of a quantum state."
msgstr ""

#: of qiskit.tools.qi.qi.purity:3
msgid "a quantum state"
msgstr ""

#: of qiskit.tools.qi.qi.purity:6
msgid "purity."
msgstr ""

#: of qiskit.tools.qi.qi.qft:1
msgid "n-qubit QFT on q in circ."
msgstr ""

#: of qiskit.tools.qi.qi.random_density_matrix:1
#: qiskit.tools.qi.qi.random_unitary_matrix:1
msgid "Deprecated in 0.8+"
msgstr ""

#: of qiskit.tools.qi.qi.shannon_entropy:1
msgid "Compute the Shannon entropy of a probability vector."
msgstr ""

#: of qiskit.tools.qi.qi.shannon_entropy:3
msgid ""
"The shannon entropy of a probability vector pv is defined as $H(pv) = - "
"\\sum_j pv[j] log_b (pv[j])$ where $0 log_b 0 = 0$."
msgstr ""

#: of qiskit.tools.qi.qi.shannon_entropy:6
msgid "a probability vector."
msgstr ""

#: of qiskit.tools.qi.qi.shannon_entropy:8
msgid "the base of the logarith"
msgstr ""

#: of qiskit.tools.qi.qi.shannon_entropy:11
msgid "The Shannon entropy H(pvec)."
msgstr ""

#: of qiskit.tools.qi.qi.vectorize:1
msgid "Flatten an operator to a vector in a specified basis."
msgstr ""

#: of qiskit.tools.qi.qi.vectorize:3
msgid "a density matrix."
msgstr ""

#: of qiskit.tools.qi.qi.vectorize:5
msgid ""
"the method of vectorization. Allowed values are - 'col' (default) "
"flattens to column-major vector. - 'row' flattens to row-major vector. - "
"'pauli'flattens in the n-qubit Pauli basis. - 'pauli-weights': flattens "
"in the n-qubit Pauli basis ordered by    weight."
msgstr ""

#: of qiskit.tools.qi.qi.vectorize:5
msgid ""
"the method of vectorization. Allowed values are - 'col' (default) "
"flattens to column-major vector. - 'row' flattens to row-major vector. - "
"'pauli'flattens in the n-qubit Pauli basis. - 'pauli-weights': flattens "
"in the n-qubit Pauli basis ordered by"
msgstr ""

#: of qiskit.tools.qi.qi.vectorize:13
msgid "the resulting vector."
msgstr ""

