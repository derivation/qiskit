# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, Qiskit Development Team
# This file is distributed under the same license as the Qiskit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Qiskit \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-12 14:30+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../autodoc/qiskit.aqua.circuits.rst:2
msgid "qiskit.aqua.circuits package"
msgstr ""

#: of qiskit.aqua.circuits.CNF:1 qiskit.aqua.circuits.DNF:1
#: qiskit.aqua.circuits.ESOP:1
msgid ""
"ベースクラス: "
":class:`qiskit.aqua.circuits.boolean_logical_circuits.BooleanLogicNormalForm`"
msgstr ""

#: of qiskit.aqua.circuits.CNF:1
msgid "Class for constructing circuits for Conjunctive Normal Forms"
msgstr ""

#: of qiskit.aqua.circuits.CNF.construct_circuit:1
#: qiskit.aqua.circuits.DNF.construct_circuit:1
#: qiskit.aqua.circuits.ESOP.construct_circuit:1
msgid "Construct circuit."
msgstr ""

#: of qiskit.aqua.circuits.CNF.construct_circuit
#: qiskit.aqua.circuits.DNF.construct_circuit
#: qiskit.aqua.circuits.ESOP.construct_circuit
#: qiskit.aqua.circuits.FixedValueComparator.build
#: qiskit.aqua.circuits.FourierTransformCircuits.construct_circuit
#: qiskit.aqua.circuits.LinearYRotation.build
#: qiskit.aqua.circuits.PhaseEstimationCircuit.construct_circuit
#: qiskit.aqua.circuits.PiecewiseLinearYRotation.build
#: qiskit.aqua.circuits.StateVectorCircuit.construct_circuit
#: qiskit.aqua.circuits.WeightedSumOperator.build
msgid "パラメータ"
msgstr ""

#: of qiskit.aqua.circuits.CNF.construct_circuit:3
#: qiskit.aqua.circuits.DNF.construct_circuit:3
#: qiskit.aqua.circuits.ESOP.construct_circuit:3
msgid "The optional circuit to extend from"
msgstr ""

#: of qiskit.aqua.circuits.CNF.construct_circuit:5
#: qiskit.aqua.circuits.DNF.construct_circuit:5
#: qiskit.aqua.circuits.ESOP.construct_circuit:5
msgid "The optional quantum register to use for problem variables"
msgstr ""

#: of qiskit.aqua.circuits.CNF.construct_circuit:7
#: qiskit.aqua.circuits.DNF.construct_circuit:7
msgid "The optional quantum register to use for problem clauses"
msgstr ""

#: of qiskit.aqua.circuits.CNF.construct_circuit:9
#: qiskit.aqua.circuits.DNF.construct_circuit:9
#: qiskit.aqua.circuits.ESOP.construct_circuit:7
msgid "The optional quantum register to use for holding the output"
msgstr ""

#: of qiskit.aqua.circuits.CNF.construct_circuit:11
#: qiskit.aqua.circuits.DNF.construct_circuit:11
#: qiskit.aqua.circuits.ESOP.construct_circuit:11
msgid "The optional quantum register to use as ancilla"
msgstr ""

#: of qiskit.aqua.circuits.CNF.construct_circuit:13
#: qiskit.aqua.circuits.DNF.construct_circuit:13
#: qiskit.aqua.circuits.ESOP.construct_circuit:13
msgid "The mode to use for building Multiple-Control Toffoli"
msgstr ""

#: of qiskit.aqua.circuits.CNF.construct_circuit
#: qiskit.aqua.circuits.DNF.construct_circuit
#: qiskit.aqua.circuits.ESOP.construct_circuit
#: qiskit.aqua.circuits.FourierTransformCircuits.construct_circuit
#: qiskit.aqua.circuits.PhaseEstimationCircuit.construct_circuit
#: qiskit.aqua.circuits.StateVectorCircuit.construct_circuit
msgid "戻り値"
msgstr ""

#: of qiskit.aqua.circuits.CNF.construct_circuit:16
#: qiskit.aqua.circuits.DNF.construct_circuit:16
#: qiskit.aqua.circuits.ESOP.construct_circuit:16
msgid "quantum circuit."
msgstr ""

#: of qiskit.aqua.circuits.CNF.construct_circuit
#: qiskit.aqua.circuits.DNF.construct_circuit
#: qiskit.aqua.circuits.ESOP.construct_circuit
msgid "戻り値の型"
msgstr ""

#: of qiskit.aqua.circuits.DNF:1
msgid "Class for constructing circuits for Disjunctive Normal Forms"
msgstr ""

#: of qiskit.aqua.circuits.ESOP:1
msgid "Class for constructing circuits for Exclusive Sum of Products"
msgstr ""

#: of qiskit.aqua.circuits.ESOP.construct_circuit:9
msgid "The index of the output register to write to"
msgstr ""

#: of qiskit.aqua.circuits.FourierTransformCircuits:1
#: qiskit.aqua.circuits.PhaseEstimationCircuit:1
#: qiskit.aqua.circuits.StateVectorCircuit:1
msgid "ベースクラス: :class:`object`"
msgstr ""

#: of qiskit.aqua.circuits.PhaseEstimationCircuit.construct_circuit:1
msgid "Construct the Phase Estimation circuit"
msgstr ""

#: of qiskit.aqua.circuits.PhaseEstimationCircuit.construct_circuit:3
msgid "the optional register to use for the quantum state"
msgstr ""

#: of qiskit.aqua.circuits.PhaseEstimationCircuit.construct_circuit:5
msgid "the optional register to use for the ancillary measurement qubits"
msgstr ""

#: of qiskit.aqua.circuits.PhaseEstimationCircuit.construct_circuit:7
msgid "an optional auxiliary quantum register"
msgstr ""

#: of qiskit.aqua.circuits.PhaseEstimationCircuit.construct_circuit:9
msgid "Boolean flag to indicate if measurement should be included in the circuit."
msgstr ""

#: of qiskit.aqua.circuits.PhaseEstimationCircuit.construct_circuit:12
msgid "the QuantumCircuit object for the constructed circuit"
msgstr ""

#: of qiskit.aqua.circuits.FourierTransformCircuits.construct_circuit:1
#: qiskit.aqua.circuits.StateVectorCircuit.construct_circuit:1
msgid "Construct the circuit representing the desired state vector."
msgstr ""

#: of qiskit.aqua.circuits.FourierTransformCircuits.construct_circuit:3
#: qiskit.aqua.circuits.StateVectorCircuit.construct_circuit:3
msgid "The optional circuit to extend from."
msgstr ""

#: of qiskit.aqua.circuits.StateVectorCircuit.construct_circuit:5
msgid "The optional register to construct the circuit with."
msgstr ""

#: of qiskit.aqua.circuits.FourierTransformCircuits.construct_circuit:15
#: qiskit.aqua.circuits.StateVectorCircuit.construct_circuit:8
msgid "QuantumCircuit."
msgstr ""

#: of qiskit.aqua.circuits.FourierTransformCircuits.construct_circuit:5
msgid "The optional qubits to construct the circuit with."
msgstr ""

#: of qiskit.aqua.circuits.FourierTransformCircuits.construct_circuit:7
msgid "degree of approximation for the desired circuit"
msgstr ""

#: of qiskit.aqua.circuits.FourierTransformCircuits.construct_circuit:9
msgid "Boolean flag to indicate Inverse Quantum Fourier Transform"
msgstr ""

#: of qiskit.aqua.circuits.FourierTransformCircuits.construct_circuit:11
msgid ""
"Boolean flag to specify if swaps should be included to align the qubit "
"order of input and output. The output qubits would be in reversed order "
"without the swaps."
msgstr ""

#: of qiskit.aqua.circuits.FixedValueComparator:1
#: qiskit.aqua.circuits.LinearYRotation:1
#: qiskit.aqua.circuits.PiecewiseLinearYRotation:1
#: qiskit.aqua.circuits.WeightedSumOperator:1
msgid "ベースクラス: :class:`qiskit.aqua.utils.circuit_factory.CircuitFactory`"
msgstr ""

#: of qiskit.aqua.circuits.FixedValueComparator:1
msgid "Fixed Value Comparator."
msgstr ""

#: of qiskit.aqua.circuits.FixedValueComparator:3
msgid ""
"Operator compares basis states |i>_n against a classically given fixed "
"value L and flips a target qubit if i >= L (or < depending on "
"parameters):"
msgstr ""

#: of qiskit.aqua.circuits.FixedValueComparator:5
msgid "|i>_n|0> --> |i>_n|1> if i >= L else |i>|0>"
msgstr ""

#: of qiskit.aqua.circuits.FixedValueComparator:7
msgid ""
"Operator is based on two's complement implementation of binary "
"subtraction but only uses carry bits and no actual result bits. If the "
"most significant carry bit (= results bit) is 1, the \"\">=\" condition "
"is True otherwise it is False."
msgstr ""

#: of qiskit.aqua.circuits.FixedValueComparator.build:1
#: qiskit.aqua.circuits.LinearYRotation.build:1
#: qiskit.aqua.circuits.PiecewiseLinearYRotation.build:1
#: qiskit.aqua.circuits.WeightedSumOperator.build:1
msgid "Adds corresponding sub-circuit to given circuit"
msgstr ""

#: of qiskit.aqua.circuits.FixedValueComparator.build:3
#: qiskit.aqua.circuits.LinearYRotation.build:3
#: qiskit.aqua.circuits.PiecewiseLinearYRotation.build:3
#: qiskit.aqua.circuits.WeightedSumOperator.build:3
msgid "quantum circuit"
msgstr ""

#: of qiskit.aqua.circuits.FixedValueComparator.build:4
#: qiskit.aqua.circuits.LinearYRotation.build:4
#: qiskit.aqua.circuits.PiecewiseLinearYRotation.build:4
#: qiskit.aqua.circuits.WeightedSumOperator.build:4
msgid "list of qubits (has to be same length as self._num_qubits)"
msgstr ""

#: of qiskit.aqua.circuits.FixedValueComparator.build:5
#: qiskit.aqua.circuits.LinearYRotation.build:5
#: qiskit.aqua.circuits.PiecewiseLinearYRotation.build:5
#: qiskit.aqua.circuits.WeightedSumOperator.build:5
msgid "list of ancilla qubits (or None if none needed)"
msgstr ""

#: of qiskit.aqua.circuits.FixedValueComparator.build:6
#: qiskit.aqua.circuits.LinearYRotation.build:6
#: qiskit.aqua.circuits.PiecewiseLinearYRotation.build:6
#: qiskit.aqua.circuits.WeightedSumOperator.build:6
msgid "parameters for circuit"
msgstr ""

#: of qiskit.aqua.circuits.LinearYRotation:1
msgid ""
"Linearly-controlled Y rotation. For a register of state qubits |x> and a "
"target qubit |0> this operator acts as:"
msgstr ""

#: of qiskit.aqua.circuits.LinearYRotation:4
msgid "|x>|0> --> |x>( cos(slope * x + offset)|0> + sin(slope * x + offset)|1> )"
msgstr ""

#: of qiskit.aqua.circuits.PiecewiseLinearYRotation:1
msgid ""
"Piecewise-linearly-controlled Y rotation. For a piecewise linear (not "
"necessarily continuous) function f(x), a state qubit register |x> and a "
"target qubit |0>, this operator acts as"
msgstr ""

#: of qiskit.aqua.circuits.PiecewiseLinearYRotation:4
msgid "|x>|0> --> |x> ( cos( f(x) )|0> + sin( f(x) )|1> )"
msgstr ""

#: of qiskit.aqua.circuits.PiecewiseLinearYRotation:6
msgid ""
"The function f(x) is defined through breakpoints, slopes and offsets as "
"follows. Suppose the breakpoints { x_0, ..., x_J } are a subset of [0,  "
"2^n-1], where n is the number of state qubits. Further on, denote the "
"corresponding slopes and offsets by a_j, b_j respectively. Then f(x) is "
"defined as:"
msgstr ""

#: of qiskit.aqua.circuits.PiecewiseLinearYRotation:11
msgid ""
"x < x_0            --> f(x) = 0 x_j <= x < x_{j+1} --> f(x) = a_j * (x - "
"x_j) + b_j"
msgstr ""

#: of qiskit.aqua.circuits.PiecewiseLinearYRotation:14
msgid "where we implicitly assume x_{J+1} = 2^n."
msgstr ""

#: of qiskit.aqua.circuits.PiecewiseLinearYRotation.evaluate:1
msgid ""
"Classically evaluate the piecewise linear rotation :param x: value to be "
"evaluated at :type x: float"
msgstr ""

#: of qiskit.aqua.circuits.PiecewiseLinearYRotation.evaluate:5
msgid "Returns: value of piecewise linear function at x"
msgstr ""

#: of qiskit.aqua.circuits.WeightedSumOperator:1
msgid "Adds q^T * w to separate register for non-negative integer weights w"
msgstr ""

#: ../../autodoc/qiskit.aqua.circuits.rst:10
msgid "Subpackages"
msgstr ""

#: ../../autodoc/qiskit.aqua.circuits.rst:17
msgid "Submodules"
msgstr ""

