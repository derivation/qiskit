# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, Qiskit Development Team
# This file is distributed under the same license as the Qiskit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Qiskit \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-12 14:30+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../autodoc/qiskit.transpiler.layout.rst:2
msgid "qiskit.transpiler.layout module"
msgstr ""

#: of qiskit.transpiler.layout:1
msgid "A two-ways dict to represent a layout."
msgstr ""

#: of qiskit.transpiler.layout:3
msgid ""
"Layout is the relation between virtual (qu)bits and physical (qu)bits. "
"Virtual (qu)bits are tuples, e.g. `(QuantumRegister(3, 'qr'), 2)` or "
"simply `qr[2]`. Physical (qu)bits are integers."
msgstr ""

#: of qiskit.transpiler.layout.Layout:1
msgid "ベースクラス: :class:`object`"
msgstr ""

#: of qiskit.transpiler.layout.Layout:1
msgid "Two-ways dict to represent a Layout."
msgstr ""

#: of qiskit.transpiler.layout.Layout.add:1
msgid ""
"Adds a map element between `bit` and `physical_bit`. If `physical_bit` is"
" not defined, `bit` will be mapped to a new physical bit (extending the "
"length of the layout by one.) :param virtual_bit: A (qu)bit. For example,"
" (QuantumRegister(3, 'qr'), 2). :type virtual_bit: tuple :param "
"physical_bit: A physical bit. For example, 3. :type physical_bit: int"
msgstr ""

#: of qiskit.transpiler.layout.Layout.add_register:1
msgid ""
"Adds at the end physical_qubits that map each bit in reg. :param reg: A "
"(qu)bit Register. For example, QuantumRegister(3, 'qr'). :type reg: "
"Register"
msgstr ""

#: of qiskit.transpiler.layout.Layout.combine_into_edge_map:1
msgid "Combines self and another_layout into an \"edge map\"."
msgstr ""

#: of qiskit.transpiler.layout.Layout.combine_into_edge_map:3
msgid "For example::"
msgstr ""

#: of qiskit.transpiler.layout.Layout.combine_into_edge_map:10
msgid "The edge map is used to compose dags via, for example, compose_back."
msgstr ""

#: of qiskit.transpiler.layout.Layout.combine_into_edge_map
#: qiskit.transpiler.layout.Layout.from_dict
#: qiskit.transpiler.layout.Layout.from_intlist
#: qiskit.transpiler.layout.Layout.from_tuplelist
msgid "パラメータ"
msgstr ""

#: of qiskit.transpiler.layout.Layout.combine_into_edge_map:12
msgid "The other layout to combine."
msgstr ""

#: of qiskit.transpiler.layout.Layout.combine_into_edge_map
#: qiskit.transpiler.layout.Layout.from_intlist
#: qiskit.transpiler.layout.Layout.from_tuplelist
#: qiskit.transpiler.layout.Layout.generate_trivial_layout
msgid "戻り値"
msgstr ""

#: of qiskit.transpiler.layout.Layout.combine_into_edge_map:15
msgid "A \"edge map\"."
msgstr ""

#: of qiskit.transpiler.layout.Layout.combine_into_edge_map
#: qiskit.transpiler.layout.Layout.from_intlist
#: qiskit.transpiler.layout.Layout.from_tuplelist
#: qiskit.transpiler.layout.Layout.generate_trivial_layout
msgid "戻り値の型"
msgstr ""

#: of qiskit.transpiler.layout.Layout.combine_into_edge_map
#: qiskit.transpiler.layout.Layout.from_intlist
#: qiskit.transpiler.layout.Layout.from_tuplelist
#: qiskit.transpiler.layout.Layout.swap
msgid "raises"
msgstr ""

#: of qiskit.transpiler.layout.Layout.combine_into_edge_map:18
msgid ""
":exc:`LayoutError` -- another_layout can be bigger than self, but not "
"smaller. Otherwise, raises."
msgstr ""

#: of qiskit.transpiler.layout.Layout.copy:1
msgid "Returns a copy of a Layout instance."
msgstr ""

#: of qiskit.transpiler.layout.Layout.from_dict:1
msgid ""
"Populates a Layout from a dictionary. The dictionary must be a bijective "
"mapping between virtual qubits (tuple) and physical qubits (int)."
msgstr ""

#: of qiskit.transpiler.layout.Layout.from_dict:5
msgid ""
"e.g.: {(QuantumRegister(3, 'qr'), 0): 0,  (QuantumRegister(3, 'qr'), 1): "
"1,  (QuantumRegister(3, 'qr'), 2): 2}  Can be written more concisely as "
"follows:  virtual to physical:     {qr[0]: 0,      qr[1]: 1,      qr[2]: "
"2}  physical to virtual:     {0: qr[0],      1: qr[1],      2: qr[2]}"
msgstr ""

#: of qiskit.transpiler.layout.Layout.from_dict:5
msgid "e.g.: {(QuantumRegister(3, 'qr'), 0): 0,"
msgstr ""

#: of qiskit.transpiler.layout.Layout.from_dict:7
msgid "(QuantumRegister(3, 'qr'), 1): 1, (QuantumRegister(3, 'qr'), 2): 2}"
msgstr ""

#: of qiskit.transpiler.layout.Layout.from_dict:10
msgid "Can be written more concisely as follows:"
msgstr ""

#: of qiskit.transpiler.layout.Layout.from_dict:15
msgid "virtual to physical:"
msgstr ""

#: of qiskit.transpiler.layout.Layout.from_dict:15
msgid "{qr[0]: 0,"
msgstr ""

#: of qiskit.transpiler.layout.Layout.from_dict:14
msgid "qr[1]: 1, qr[2]: 2}"
msgstr ""

#: of qiskit.transpiler.layout.Layout.from_dict:19
msgid "physical to virtual:"
msgstr ""

#: of qiskit.transpiler.layout.Layout.from_dict:19
msgid "{0: qr[0],"
msgstr ""

#: of qiskit.transpiler.layout.Layout.from_dict:19
msgid "1: qr[1], 2: qr[2]}"
msgstr ""

#: of qiskit.transpiler.layout.Layout.from_intlist:1
msgid ""
"Converts a list of integers to a Layout mapping virtual qubits (index of "
"the list) to physical qubits (the list values)."
msgstr ""

#: of qiskit.transpiler.layout.Layout.from_intlist:5
msgid "A list of integers."
msgstr ""

#: of qiskit.transpiler.layout.Layout.from_intlist:7
msgid "The quantum registers to apply the layout to."
msgstr ""

#: of qiskit.transpiler.layout.Layout.from_intlist:11
msgid "The corresponding Layout object."
msgstr ""

#: of qiskit.transpiler.layout.Layout.from_intlist:14
msgid ":exc:`LayoutError` -- Invalid input layout."
msgstr ""

#: of qiskit.transpiler.layout.Layout.from_tuplelist:1
msgid ""
"Populates a Layout from a list containing virtual "
"qubits---(QuantumRegister, int) tuples---, or None."
msgstr ""

#: of qiskit.transpiler.layout.Layout.from_tuplelist:4
msgid "e.g.: [qr[0], None, qr[2], qr[3]]"
msgstr ""

#: of qiskit.transpiler.layout.Layout.from_tuplelist:7
msgid "the corresponding Layout object"
msgstr ""

#: of qiskit.transpiler.layout.Layout.from_tuplelist:10
msgid ":exc:`LayoutError` -- If the elements are not (Register, integer) or None"
msgstr ""

#: of qiskit.transpiler.layout.Layout.generate_trivial_layout:1
msgid ""
"Creates a trivial (\"one-to-one\") Layout with the registers in `regs`. "
":param \\*regs: registers to include in the layout. :type \\*regs: "
"Registers"
msgstr ""

#: of qiskit.transpiler.layout.Layout.generate_trivial_layout:5
msgid "A layout with all the `regs` in the given order."
msgstr ""

#: of qiskit.transpiler.layout.Layout.get_physical_bits:1
msgid ""
"Returns the dictionary where the keys are physical (qu)bits and the "
"values are virtual (qu)bits."
msgstr ""

#: of qiskit.transpiler.layout.Layout.get_registers:1
msgid ""
"Returns the registers in the layout [QuantumRegister(2, 'qr0'), "
"QuantumRegister(3, 'qr1')] :returns: A list of Register in the layout "
":rtype: List"
msgstr ""

#: of qiskit.transpiler.layout.Layout.get_virtual_bits:1
msgid ""
"Returns the dictionary where the keys are virtual (qu)bits and the values"
" are physical (qu)bits."
msgstr ""

#: of qiskit.transpiler.layout.Layout.is_virtual:1
msgid "Checks if value has the format of a virtual qubit"
msgstr ""

#: of qiskit.transpiler.layout.Layout.order_based_on_type:1
msgid ""
"decides which one is physical/virtual based on the type. Returns "
"(virtual, physical)"
msgstr ""

#: of qiskit.transpiler.layout.Layout.swap:1
msgid ""
"Swaps the map between left and right. :param left: Item to swap with "
"right. :type left: tuple or int :param right: Item to swap with left. "
":type right: tuple or int"
msgstr ""

#: of qiskit.transpiler.layout.Layout.swap:7
msgid ":exc:`LayoutError` -- If left and right have not the same type."
msgstr ""

