# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, Qiskit Development Team
# This file is distributed under the same license as the Qiskit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Qiskit \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-12 14:30+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../autodoc/qiskit.aqua.algorithms.rst:2
msgid "qiskit.aqua.algorithms package"
msgstr ""

#: of qiskit.aqua.algorithms.QuantumAlgorithm:1
msgid "ベースクラス: :class:`qiskit.aqua.pluggable.Pluggable`"
msgstr ""

#: of qiskit.aqua.algorithms.QuantumAlgorithm:1
msgid "Base class for Algorithms."
msgstr ""

#: of qiskit.aqua.algorithms.QuantumAlgorithm:3
msgid ""
"This method should initialize the module and its configuration, and use "
"an exception if a component of the module is available."
msgstr ""

#: of qiskit.aqua.algorithms.QuantumAlgorithm.random:1
msgid "Return a numpy random."
msgstr ""

#: of qiskit.aqua.algorithms.QuantumAlgorithm.run:1
msgid "Execute the algorithm with selected backend."
msgstr ""

#: of qiskit.aqua.algorithms.AmplitudeEstimation.construct_circuit
#: qiskit.aqua.algorithms.BernsteinVazirani.construct_circuit
#: qiskit.aqua.algorithms.DeutschJozsa.construct_circuit
#: qiskit.aqua.algorithms.Grover.construct_circuit
#: qiskit.aqua.algorithms.HHL.construct_circuit
#: qiskit.aqua.algorithms.HHL.expand_to_hermitian
#: qiskit.aqua.algorithms.HHL.expand_to_powerdim
#: qiskit.aqua.algorithms.HHL.init_params
#: qiskit.aqua.algorithms.IQPE.construct_circuit
#: qiskit.aqua.algorithms.IQPE.init_params
#: qiskit.aqua.algorithms.QAOA.init_params
#: qiskit.aqua.algorithms.QGAN.set_generator
#: qiskit.aqua.algorithms.QPE.construct_circuit
#: qiskit.aqua.algorithms.QPE.init_params
#: qiskit.aqua.algorithms.QSVM.construct_circuit
#: qiskit.aqua.algorithms.QSVM.construct_kernel_matrix
#: qiskit.aqua.algorithms.QSVM.load_model qiskit.aqua.algorithms.QSVM.predict
#: qiskit.aqua.algorithms.QSVM.save_model qiskit.aqua.algorithms.QSVM.test
#: qiskit.aqua.algorithms.QSVM.train
#: qiskit.aqua.algorithms.QuantumAlgorithm.run
#: qiskit.aqua.algorithms.SVM_Classical.load_model
#: qiskit.aqua.algorithms.SVM_Classical.save_model
#: qiskit.aqua.algorithms.SVM_Classical.test
#: qiskit.aqua.algorithms.SVM_Classical.train
#: qiskit.aqua.algorithms.Shor.construct_circuit
#: qiskit.aqua.algorithms.Shor.init_params
#: qiskit.aqua.algorithms.Simon.construct_circuit
#: qiskit.aqua.algorithms.VQC.construct_circuit
#: qiskit.aqua.algorithms.VQC.predict qiskit.aqua.algorithms.VQC.test
#: qiskit.aqua.algorithms.VQC.train
#: qiskit.aqua.algorithms.VQE.construct_circuit
#: qiskit.aqua.algorithms.VQE.init_params
msgid "パラメータ"
msgstr ""

#: of qiskit.aqua.algorithms.QuantumAlgorithm.run:3
msgid "the experiemental setting."
msgstr ""

#: of qiskit.aqua.algorithms.AmplitudeEstimation.construct_circuit
#: qiskit.aqua.algorithms.BernsteinVazirani.construct_circuit
#: qiskit.aqua.algorithms.DeutschJozsa.construct_circuit
#: qiskit.aqua.algorithms.EOH.construct_circuit
#: qiskit.aqua.algorithms.Grover.construct_circuit
#: qiskit.aqua.algorithms.HHL.construct_circuit
#: qiskit.aqua.algorithms.HHL.expand_to_hermitian
#: qiskit.aqua.algorithms.HHL.expand_to_powerdim
#: qiskit.aqua.algorithms.IQPE.construct_circuit
#: qiskit.aqua.algorithms.QGAN.init_params
#: qiskit.aqua.algorithms.QPE.construct_circuit
#: qiskit.aqua.algorithms.QSVM.construct_kernel_matrix
#: qiskit.aqua.algorithms.QSVM.predict qiskit.aqua.algorithms.QSVM.test
#: qiskit.aqua.algorithms.QuantumAlgorithm.run
#: qiskit.aqua.algorithms.SVM_Classical.predict
#: qiskit.aqua.algorithms.SVM_Classical.test
#: qiskit.aqua.algorithms.Shor.construct_circuit
#: qiskit.aqua.algorithms.Simon.construct_circuit
#: qiskit.aqua.algorithms.VQC.construct_circuit
#: qiskit.aqua.algorithms.VQC.predict qiskit.aqua.algorithms.VQC.test
#: qiskit.aqua.algorithms.VQE.construct_circuit
#: qiskit.aqua.algorithms.VQE.init_params
#: qiskit.aqua.algorithms.VQE.print_settings
msgid "戻り値"
msgstr ""

#: of qiskit.aqua.algorithms.QuantumAlgorithm.run:6
msgid "results of an algorithm."
msgstr ""

#: of qiskit.aqua.algorithms.EOH.construct_circuit
#: qiskit.aqua.algorithms.HHL.expand_to_hermitian
#: qiskit.aqua.algorithms.HHL.expand_to_powerdim
#: qiskit.aqua.algorithms.IQPE.construct_circuit
#: qiskit.aqua.algorithms.QGAN.init_params
#: qiskit.aqua.algorithms.QPE.construct_circuit
#: qiskit.aqua.algorithms.QSVM.construct_kernel_matrix
#: qiskit.aqua.algorithms.QSVM.predict qiskit.aqua.algorithms.QSVM.test
#: qiskit.aqua.algorithms.QuantumAlgorithm.run
#: qiskit.aqua.algorithms.SVM_Classical.predict
#: qiskit.aqua.algorithms.SVM_Classical.test
#: qiskit.aqua.algorithms.Shor.construct_circuit
#: qiskit.aqua.algorithms.VQC.construct_circuit
#: qiskit.aqua.algorithms.VQC.predict qiskit.aqua.algorithms.VQC.test
#: qiskit.aqua.algorithms.VQE.construct_circuit
#: qiskit.aqua.algorithms.VQE.init_params
#: qiskit.aqua.algorithms.VQE.print_settings
msgid "戻り値の型"
msgstr ""

#: of qiskit.aqua.algorithms.VQC:1 qiskit.aqua.algorithms.VQE:1
msgid "ベースクラス: :class:`qiskit.aqua.algorithms.adaptive.vq_algorithm.VQAlgorithm`"
msgstr ""

#: of qiskit.aqua.algorithms.VQE:1
msgid "The Variational Quantum Eigensolver algorithm."
msgstr ""

#: of qiskit.aqua.algorithms.VQE:3
msgid "See https://arxiv.org/abs/1304.3061"
msgstr ""

#: of qiskit.aqua.algorithms.VQE.construct_circuit:1
msgid "Generate the circuits."
msgstr ""

#: of qiskit.aqua.algorithms.VQE.construct_circuit:3
msgid "parameters for variational form."
msgstr ""

#: of qiskit.aqua.algorithms.VQE.construct_circuit:5
msgid "backend object."
msgstr ""

#: of qiskit.aqua.algorithms.VQE.construct_circuit:7
msgid ""
"is backend from AerProvider, if True and mode is paulis, single circuit "
"is generated."
msgstr ""

#: of qiskit.aqua.algorithms.VQE.construct_circuit:11
msgid "the generated circuits with Hamiltonian."
msgstr ""

#: of qiskit.aqua.algorithms.IQPE.init_params:1
#: qiskit.aqua.algorithms.QPE.init_params:1
#: qiskit.aqua.algorithms.Shor.init_params:1
#: qiskit.aqua.algorithms.VQE.init_params:1
msgid "Initialize via parameters dictionary and algorithm input instance."
msgstr ""

#: of qiskit.aqua.algorithms.HHL.init_params:3
#: qiskit.aqua.algorithms.IQPE.init_params:3
#: qiskit.aqua.algorithms.QAOA.init_params:3
#: qiskit.aqua.algorithms.QPE.init_params:3
#: qiskit.aqua.algorithms.Shor.init_params:3
#: qiskit.aqua.algorithms.VQE.init_params:3
msgid "parameters dictionary"
msgstr ""

#: of qiskit.aqua.algorithms.IQPE.init_params:4
#: qiskit.aqua.algorithms.QAOA.init_params:5
#: qiskit.aqua.algorithms.QPE.init_params:4
#: qiskit.aqua.algorithms.VQE.init_params:5
msgid "EnergyInput instance"
msgstr ""

#: of qiskit.aqua.algorithms.VQE.init_params:8
msgid "vqe object"
msgstr ""

#: of qiskit.aqua.algorithms.VQE.print_settings:1
msgid "Preparing the setting of VQE into a string."
msgstr ""

#: of qiskit.aqua.algorithms.VQE.print_settings:3
msgid "the formatted setting of VQE"
msgstr ""

#: of qiskit.aqua.algorithms.VQE.setting:1
msgid "Prepare the setting of VQE as a string."
msgstr ""

#: of qiskit.aqua.algorithms.QAOA:1
msgid "ベースクラス: :class:`qiskit.aqua.algorithms.adaptive.vqe.vqe.VQE`"
msgstr ""

#: of qiskit.aqua.algorithms.QAOA:1
msgid "The Quantum Approximate Optimization Algorithm."
msgstr ""

#: of qiskit.aqua.algorithms.QAOA:3
msgid "See https://arxiv.org/abs/1411.4028"
msgstr ""

#: of qiskit.aqua.algorithms.HHL.init_params:1
#: qiskit.aqua.algorithms.QAOA.init_params:1
msgid "Initialize via parameters dictionary and algorithm input instance"
msgstr ""

#: of qiskit.aqua.algorithms.VQC.construct_circuit:1
msgid "Construct circuit based on data and parameters in variational form."
msgstr ""

#: of qiskit.aqua.algorithms.VQC.construct_circuit:3
msgid "1-D array with D dimension"
msgstr ""

#: of qiskit.aqua.algorithms.VQC.construct_circuit:5
msgid "list of 1-D array, parameters sets for variational form"
msgstr ""

#: of qiskit.aqua.algorithms.VQC.construct_circuit:7
msgid "flag to add measurement"
msgstr ""

#: of qiskit.aqua.algorithms.VQC.construct_circuit:10
msgid "the circuit"
msgstr ""

#: of qiskit.aqua.algorithms.VQC.predict:1
msgid "Predict the labels for the data."
msgstr ""

#: of qiskit.aqua.algorithms.VQC.predict:3
msgid "NxD array, N is number of data, D is data dimension"
msgstr ""

#: of qiskit.aqua.algorithms.QSVM.construct_kernel_matrix:9
#: qiskit.aqua.algorithms.QSVM.predict:6 qiskit.aqua.algorithms.QSVM.test:8
#: qiskit.aqua.algorithms.QSVM.train:8 qiskit.aqua.algorithms.VQC.predict:5
#: qiskit.aqua.algorithms.VQC.test:7 qiskit.aqua.algorithms.VQC.train:7
msgid "quantum backend with all setting"
msgstr ""

#: of qiskit.aqua.algorithms.VQC.predict:7 qiskit.aqua.algorithms.VQC.test:9
#: qiskit.aqua.algorithms.VQC.train:9
msgid "the size of each minibatched accuracy evalutation"
msgstr ""

#: of qiskit.aqua.algorithms.VQC.predict:9 qiskit.aqua.algorithms.VQC.test:11
msgid "list of parameters to populate in the variational form"
msgstr ""

#: of qiskit.aqua.algorithms.VQC.predict:12
msgid ""
"for each data point, generates the predicted probability for each class "
"list: for each data point, generates the predicted label (that with the "
"highest prob)"
msgstr ""

#: of qiskit.aqua.algorithms.VQC.test:1
msgid ""
"Predict the labels for the data, and test against with ground truth "
"labels."
msgstr ""

#: of qiskit.aqua.algorithms.VQC.test:3
msgid "NxD array, N is number of data and D is data dimension"
msgstr ""

#: of qiskit.aqua.algorithms.VQC.test:5 qiskit.aqua.algorithms.VQC.train:5
msgid "Nx1 array, N is number of data"
msgstr ""

#: of qiskit.aqua.algorithms.VQC.test:14
msgid "classification accuracy"
msgstr ""

#: of qiskit.aqua.algorithms.VQC.train:1
msgid "Train the models, and save results."
msgstr ""

#: of qiskit.aqua.algorithms.VQC.train:3
msgid "NxD array, N is number of data and D is dimension"
msgstr ""

#: of qiskit.aqua.algorithms.AmplitudeEstimation:1
#: qiskit.aqua.algorithms.BernsteinVazirani:1
#: qiskit.aqua.algorithms.DeutschJozsa:1 qiskit.aqua.algorithms.EOH:1
#: qiskit.aqua.algorithms.ExactEigensolver:1
#: qiskit.aqua.algorithms.ExactLSsolver:1 qiskit.aqua.algorithms.Grover:1
#: qiskit.aqua.algorithms.HHL:1 qiskit.aqua.algorithms.IQPE:1
#: qiskit.aqua.algorithms.QGAN:1 qiskit.aqua.algorithms.QPE:1
#: qiskit.aqua.algorithms.QSVM:1 qiskit.aqua.algorithms.SVM_Classical:1
#: qiskit.aqua.algorithms.Shor:1 qiskit.aqua.algorithms.Simon:1
msgid "ベースクラス: :class:`qiskit.aqua.algorithms.quantum_algorithm.QuantumAlgorithm`"
msgstr ""

#: of qiskit.aqua.algorithms.QGAN:1
msgid "Quantum Generative Adversarial Network."
msgstr ""

#: of qiskit.aqua.algorithms.QGAN.init_params:1
msgid ""
"Initialize qGAN via parameters dictionary and algorithm input instance. "
":param params: parameters dictionary :param algo_input: Input instance"
msgstr ""

#: of qiskit.aqua.algorithms.QGAN.init_params:5
msgid "qgan object"
msgstr ""

#: of qiskit.aqua.algorithms.QGAN.set_discriminator:1
msgid "Initialize discriminator."
msgstr ""

#: of qiskit.aqua.algorithms.QGAN.set_discriminator:3
#: qiskit.aqua.algorithms.QGAN.set_generator:7
msgid "Returns:"
msgstr ""

#: of qiskit.aqua.algorithms.QGAN.set_generator:1
msgid ""
"Initialize generator. :param generator_circuit: VariationalForm, "
"parametrized quantum circuit which sets the structure of the quantum"
msgstr ""

#: of qiskit.aqua.algorithms.QGAN.set_generator:3
msgid "generator"
msgstr ""

#: of qiskit.aqua.algorithms.QGAN.set_generator:4
msgid "array, initial parameters for the generator circuit"
msgstr ""

#: of qiskit.aqua.algorithms.QGAN.set_generator:5
msgid "Optimizer, optimizer to be used for the training of the generator"
msgstr ""

#: of qiskit.aqua.algorithms.QGAN.train:1
msgid "Train the qGAN"
msgstr ""

#: of qiskit.aqua.algorithms.ExactEigensolver:1
msgid "The Exact Eigensolver algorithm."
msgstr ""

#: of qiskit.aqua.algorithms.EOH.init_params:1
#: qiskit.aqua.algorithms.ExactEigensolver.init_params:1
msgid ""
"Initialize via parameters dictionary and algorithm input instance :param "
"params: parameters dictionary :param algo_input: EnergyInput instance"
msgstr ""

#: of qiskit.aqua.algorithms.ExactLSsolver:1
msgid "The Exact LinearSystem algorithm."
msgstr ""

#: of qiskit.aqua.algorithms.ExactLSsolver.init_params:1
msgid ""
"Initialize via parameters dictionary and algorithm input instance :param "
"params: parameters dictionary :param algo_input: LinearSystemInput "
"instance"
msgstr ""

#: of qiskit.aqua.algorithms.SVM_Classical:1
msgid ""
"The classical svm interface. Internally, it will run the binary "
"classification or multiclass classification based on how many classes the"
" data have."
msgstr ""

#: of qiskit.aqua.algorithms.QSVM.load_model:1
#: qiskit.aqua.algorithms.SVM_Classical.load_model:1
msgid "Load a model from a file path."
msgstr ""

#: of qiskit.aqua.algorithms.QSVM.load_model:3
#: qiskit.aqua.algorithms.SVM_Classical.load_model:3
msgid "tthe path of the saved model."
msgstr ""

#: of qiskit.aqua.algorithms.SVM_Classical.predict:1
msgid ""
"predict using the svm :param data: NxD array, where N is the number of "
"data,"
msgstr ""

#: of qiskit.aqua.algorithms.SVM_Classical.predict:3
#: qiskit.aqua.algorithms.SVM_Classical.test:3
#: qiskit.aqua.algorithms.SVM_Classical.train:3
msgid "D is the feature dimension."
msgstr ""

#: of qiskit.aqua.algorithms.QSVM.predict:9
#: qiskit.aqua.algorithms.SVM_Classical.predict:6
msgid "predicted labels, Nx1 array"
msgstr ""

#: of qiskit.aqua.algorithms.QSVM.save_model:1
#: qiskit.aqua.algorithms.SVM_Classical.save_model:1
msgid "Save the model to a file path."
msgstr ""

#: of qiskit.aqua.algorithms.QSVM.save_model:3
#: qiskit.aqua.algorithms.SVM_Classical.save_model:3
msgid "a path to save the model."
msgstr ""

#: of qiskit.aqua.algorithms.SVM_Classical.test:1
msgid "test the svm :param data: NxD array, where N is the number of data,"
msgstr ""

#: of qiskit.aqua.algorithms.QSVM.test:6 qiskit.aqua.algorithms.QSVM.train:6
#: qiskit.aqua.algorithms.SVM_Classical.test:5
#: qiskit.aqua.algorithms.SVM_Classical.train:5
msgid "Nx1 array, where N is the number of data"
msgstr ""

#: of qiskit.aqua.algorithms.QSVM.test:11
#: qiskit.aqua.algorithms.SVM_Classical.test:8
msgid "accuracy"
msgstr ""

#: of qiskit.aqua.algorithms.SVM_Classical.train:1
msgid "train the svm :param data: NxD array, where N is the number of data,"
msgstr ""

#: of qiskit.aqua.algorithms.EOH:1
msgid "The Quantum EOH (Evolution of Hamiltonian) algorithm."
msgstr ""

#: of qiskit.aqua.algorithms.EOH.construct_circuit:1
msgid "Construct the circuit."
msgstr ""

#: of qiskit.aqua.algorithms.EOH.construct_circuit:3
msgid "the circuit."
msgstr ""

#: of qiskit.aqua.algorithms.QSVM:1
msgid "Quantum SVM method."
msgstr ""

#: of qiskit.aqua.algorithms.QSVM:3
msgid ""
"Internally, it will run the binary classification or multiclass "
"classification based on how many classes the data have."
msgstr ""

#: of qiskit.aqua.algorithms.QSVM.construct_circuit:1
msgid "Generate inner product of x1 and x2 with the given feature map."
msgstr ""

#: of qiskit.aqua.algorithms.QSVM.construct_circuit:3
msgid "The dimension of x1 and x2 must be the same."
msgstr ""

#: of qiskit.aqua.algorithms.QSVM.construct_circuit:5
#: qiskit.aqua.algorithms.QSVM.construct_circuit:7
msgid "data points, 1-D array, dimension is D"
msgstr ""

#: of qiskit.aqua.algorithms.QSVM.construct_circuit:9
msgid "add measurement gates at the end"
msgstr ""

#: of qiskit.aqua.algorithms.QSVM.construct_kernel_matrix:1
msgid ""
"Construct kernel matrix, if x2_vec is None, self-innerproduct is "
"conducted."
msgstr ""

#: of qiskit.aqua.algorithms.QSVM.construct_kernel_matrix:3
msgid ""
"data points, 2-D array, N1xD, where N1 is the number of data, D is the "
"feature dimension"
msgstr ""

#: of qiskit.aqua.algorithms.QSVM.construct_kernel_matrix:6
msgid ""
"data points, 2-D array, N2xD, where N2 is the number of data, D is the "
"feature dimension"
msgstr ""

#: of qiskit.aqua.algorithms.QSVM.construct_kernel_matrix:12
msgid "2-D matrix, N1xN2"
msgstr ""

#: of qiskit.aqua.algorithms.QSVM.init_params:1
msgid "Constructor from params."
msgstr ""

#: of qiskit.aqua.algorithms.QSVM.predict:1
msgid "Predict using the svm."
msgstr ""

#: of qiskit.aqua.algorithms.QSVM.predict:3 qiskit.aqua.algorithms.QSVM.test:3
#: qiskit.aqua.algorithms.QSVM.train:3
msgid "NxD array, where N is the number of data, D is the feature dimension."
msgstr ""

#: of qiskit.aqua.algorithms.QSVM.test:1
msgid "Test the svm."
msgstr ""

#: of qiskit.aqua.algorithms.QSVM.train:1
msgid "Train the svm."
msgstr ""

#: of qiskit.aqua.algorithms.Grover:1
msgid "The Grover's Search algorithm."
msgstr ""

#: of qiskit.aqua.algorithms.Grover:3
msgid ""
"If the `num_iterations` param is specified, the amplitude amplification "
"iteration will be built as specified."
msgstr ""

#: of qiskit.aqua.algorithms.Grover:5
msgid ""
"If the `incremental` mode is specified, which indicates that the optimal "
"`num_iterations` isn't known in advance, a multi-round schedule will be "
"followed with incremental trial `num_iterations` values. The "
"implementation follows Section 4 of Boyer et al. <https://arxiv.org/abs"
"/quant-ph/9605034>"
msgstr ""

#: of qiskit.aqua.algorithms.BernsteinVazirani.construct_circuit:1
#: qiskit.aqua.algorithms.DeutschJozsa.construct_circuit:1
#: qiskit.aqua.algorithms.Grover.construct_circuit:1
#: qiskit.aqua.algorithms.Simon.construct_circuit:1
msgid "Construct the quantum circuit"
msgstr ""

#: of qiskit.aqua.algorithms.AmplitudeEstimation.construct_circuit:3
#: qiskit.aqua.algorithms.BernsteinVazirani.construct_circuit:3
#: qiskit.aqua.algorithms.DeutschJozsa.construct_circuit:3
#: qiskit.aqua.algorithms.Grover.construct_circuit:3
#: qiskit.aqua.algorithms.IQPE.construct_circuit:9
#: qiskit.aqua.algorithms.QPE.construct_circuit:3
#: qiskit.aqua.algorithms.Shor.construct_circuit:3
#: qiskit.aqua.algorithms.Simon.construct_circuit:3
msgid "Boolean flag to indicate if measurement should be included in the circuit."
msgstr ""

#: of qiskit.aqua.algorithms.AmplitudeEstimation.construct_circuit:6
#: qiskit.aqua.algorithms.BernsteinVazirani.construct_circuit:6
#: qiskit.aqua.algorithms.DeutschJozsa.construct_circuit:6
#: qiskit.aqua.algorithms.Grover.construct_circuit:6
#: qiskit.aqua.algorithms.HHL.construct_circuit:7
#: qiskit.aqua.algorithms.Simon.construct_circuit:6
msgid "the QuantumCircuit object for the constructed circuit"
msgstr ""

#: of qiskit.aqua.algorithms.Grover.init_params:1
msgid ""
"Initialize via parameters dictionary and algorithm input instance :param "
"params: parameters dictionary :param algo_input: input instance"
msgstr ""

#: of qiskit.aqua.algorithms.IQPE:1
msgid "The Iterative Quantum Phase Estimation algorithm."
msgstr ""

#: of qiskit.aqua.algorithms.IQPE:3
msgid "See https://arxiv.org/abs/quant-ph/0610214"
msgstr ""

#: of qiskit.aqua.algorithms.IQPE.construct_circuit:1
msgid "Construct the kth iteration Quantum Phase Estimation circuit."
msgstr ""

#: of qiskit.aqua.algorithms.IQPE.construct_circuit:3
msgid ""
"For details of parameters, please see Fig. 2 in https://arxiv.org/pdf"
"/quant-ph/0610214.pdf."
msgstr ""

#: of qiskit.aqua.algorithms.IQPE.construct_circuit:5
msgid "the iteration idx."
msgstr ""

#: of qiskit.aqua.algorithms.IQPE.construct_circuit:7
msgid "the feedback angle."
msgstr ""

#: of qiskit.aqua.algorithms.IQPE.construct_circuit:12
msgid "the quantum circuit per iteration"
msgstr ""

#: of qiskit.aqua.algorithms.QPE:1
msgid "The Quantum Phase Estimation algorithm."
msgstr ""

#: of qiskit.aqua.algorithms.QPE.construct_circuit:1
#: qiskit.aqua.algorithms.Shor.construct_circuit:1
msgid "Construct circuit."
msgstr ""

#: of qiskit.aqua.algorithms.QPE.construct_circuit:6
#: qiskit.aqua.algorithms.Shor.construct_circuit:6
msgid "quantum circuit."
msgstr ""

#: of qiskit.aqua.algorithms.AmplitudeEstimation:1
msgid "The Amplitude Estimation algorithm."
msgstr ""

#: of qiskit.aqua.algorithms.AmplitudeEstimation.construct_circuit:1
msgid "Construct the Amplitude Estimation quantum circuit."
msgstr ""

#: of qiskit.aqua.algorithms.AmplitudeEstimation.init_params:1
msgid ""
"Initialize via parameters dictionary and algorithm input instance :param "
"params: parameters dictionary :param algo_input: Input instance"
msgstr ""

#: of qiskit.aqua.algorithms.Simon:1
msgid "The Simon algorithm."
msgstr ""

#: of qiskit.aqua.algorithms.DeutschJozsa:1
msgid "The Deutsch-Jozsa algorithm."
msgstr ""

#: of qiskit.aqua.algorithms.BernsteinVazirani:1
msgid "The Bernstein-Vazirani algorithm."
msgstr ""

#: of qiskit.aqua.algorithms.HHL:1
msgid "The HHL algorithm."
msgstr ""

#: of qiskit.aqua.algorithms.HHL:3
msgid ""
"The quantum circuit for this algorithm is returned by `generate_circuit`."
" Running the algorithm will execute the circuit and return the result "
"vector, measured (real hardware backend) or derived (qasm_simulator) via "
"state tomography or calculated from the statevector "
"(statevector_simulator)."
msgstr ""

#: of qiskit.aqua.algorithms.HHL.construct_circuit:1
msgid "Construct the HHL circuit."
msgstr ""

#: of qiskit.aqua.algorithms.HHL.construct_circuit:3
msgid "indicate whether measurement on ancillary qubit should be performed"
msgstr ""

#: of qiskit.aqua.algorithms.HHL.expand_to_hermitian:1
msgid ""
"Expand a non-hermitian matrix A to a hermitian matrix by [[0, A.H], [A, "
"0]] and expand vector b to [b.conj, b]."
msgstr ""

#: of qiskit.aqua.algorithms.HHL.expand_to_hermitian:4
#: qiskit.aqua.algorithms.HHL.expand_to_powerdim:5
msgid "the input matrix"
msgstr ""

#: of qiskit.aqua.algorithms.HHL.expand_to_hermitian:6
#: qiskit.aqua.algorithms.HHL.expand_to_powerdim:7
msgid "the input vector"
msgstr ""

#: of qiskit.aqua.algorithms.HHL.expand_to_hermitian:9
#: qiskit.aqua.algorithms.HHL.expand_to_powerdim:10
msgid "the expanded matrix vector (np.array): the expanded vector"
msgstr ""

#: of qiskit.aqua.algorithms.HHL.expand_to_powerdim:1
msgid ""
"Expand a matrix to the next-larger 2**n dimensional matrix with ones on "
"the diagonal and zeros on the off-diagonal and expand the vector with "
"zeros accordingly."
msgstr ""

#: of qiskit.aqua.algorithms.HHL.init_params:4
msgid "LinearSystemInput instance"
msgstr ""

#: of qiskit.aqua.algorithms.Shor:1
msgid "The Shor's Factoring algorithm."
msgstr ""

#: of qiskit.aqua.algorithms.Shor:3
msgid "Adapted from https://github.com/ttlion/ShorAlgQiskit"
msgstr ""

#: of qiskit.aqua.algorithms.Shor.init_params:4
msgid "input instance"
msgstr ""

#: ../../autodoc/qiskit.aqua.algorithms.rst:10
msgid "Subpackages"
msgstr ""

#: ../../autodoc/qiskit.aqua.algorithms.rst:20
msgid "Submodules"
msgstr ""

