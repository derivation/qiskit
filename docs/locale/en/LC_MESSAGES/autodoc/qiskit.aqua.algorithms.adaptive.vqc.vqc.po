# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, Qiskit Development Team
# This file is distributed under the same license as the Qiskit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Qiskit \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-12 14:30+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../autodoc/qiskit.aqua.algorithms.adaptive.vqc.vqc.rst:2
msgid "qiskit.aqua.algorithms.adaptive.vqc.vqc module"
msgstr ""

#: of qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC:1
msgid "ベースクラス: :class:`qiskit.aqua.algorithms.adaptive.vq_algorithm.VQAlgorithm`"
msgstr ""

#: of qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.construct_circuit:1
msgid "Construct circuit based on data and parameters in variational form."
msgstr ""

#: of qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.construct_circuit
#: qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.predict
#: qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.test
#: qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.train
#: qiskit.aqua.algorithms.adaptive.vqc.vqc.assign_label
#: qiskit.aqua.algorithms.adaptive.vqc.vqc.cost_estimate_sigmoid
msgid "パラメータ"
msgstr ""

#: of qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.construct_circuit:3
msgid "1-D array with D dimension"
msgstr ""

#: of qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.construct_circuit:5
msgid "list of 1-D array, parameters sets for variational form"
msgstr ""

#: of qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.construct_circuit:7
msgid "flag to add measurement"
msgstr ""

#: of qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.construct_circuit
#: qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.predict
#: qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.test
#: qiskit.aqua.algorithms.adaptive.vqc.vqc.cost_estimate
#: qiskit.aqua.algorithms.adaptive.vqc.vqc.cost_estimate_sigmoid
#: qiskit.aqua.algorithms.adaptive.vqc.vqc.return_probabilities
msgid "戻り値"
msgstr ""

#: of qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.construct_circuit:10
msgid "the circuit"
msgstr ""

#: of qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.construct_circuit
#: qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.predict
#: qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.test
#: qiskit.aqua.algorithms.adaptive.vqc.vqc.cost_estimate
#: qiskit.aqua.algorithms.adaptive.vqc.vqc.cost_estimate_sigmoid
#: qiskit.aqua.algorithms.adaptive.vqc.vqc.return_probabilities
msgid "戻り値の型"
msgstr ""

#: of qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.predict:1
msgid "Predict the labels for the data."
msgstr ""

#: of qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.predict:3
msgid "NxD array, N is number of data, D is data dimension"
msgstr ""

#: of qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.predict:5
#: qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.test:7
#: qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.train:7
msgid "quantum backend with all setting"
msgstr ""

#: of qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.predict:7
#: qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.test:9
#: qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.train:9
msgid "the size of each minibatched accuracy evalutation"
msgstr ""

#: of qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.predict:9
#: qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.test:11
msgid "list of parameters to populate in the variational form"
msgstr ""

#: of qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.predict:12
msgid ""
"for each data point, generates the predicted probability for each class "
"list: for each data point, generates the predicted label (that with the "
"highest prob)"
msgstr ""

#: of qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.test:1
msgid ""
"Predict the labels for the data, and test against with ground truth "
"labels."
msgstr ""

#: of qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.test:3
msgid "NxD array, N is number of data and D is data dimension"
msgstr ""

#: of qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.test:5
#: qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.train:5
msgid "Nx1 array, N is number of data"
msgstr ""

#: of qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.test:14
msgid "classification accuracy"
msgstr ""

#: of qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.train:1
msgid "Train the models, and save results."
msgstr ""

#: of qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.train:3
msgid "NxD array, N is number of data and D is dimension"
msgstr ""

#: of qiskit.aqua.algorithms.adaptive.vqc.vqc.assign_label:1
msgid ""
"Classes = 2: - If odd number of qubits we use majority vote - If even "
"number of qubits we use parity Classes = 3 - We use part-parity"
msgstr ""

#: of qiskit.aqua.algorithms.adaptive.vqc.vqc.assign_label:6
msgid "{ex. for 2 qubits: [00], [01,10], [11] would be the three labels}"
msgstr ""

#: of qiskit.aqua.algorithms.adaptive.vqc.vqc.assign_label:7
msgid "measured key"
msgstr ""

#: of qiskit.aqua.algorithms.adaptive.vqc.vqc.assign_label:9
msgid "number of classes"
msgstr ""

#: of qiskit.aqua.algorithms.adaptive.vqc.vqc.cost_estimate:1
msgid ""
"Calculate cross entropy # shots is kept since it may be needed in future."
" :param shots: the number of shots used in quantum computing :type shots:"
" int :param probs: NxK array, N is the number of data and K is the number"
" of class :type probs: numpy.ndarray :param gt_labels: Nx1 array :type "
"gt_labels: numpy.ndarray"
msgstr ""

#: of qiskit.aqua.algorithms.adaptive.vqc.vqc.cost_estimate:10
msgid "cross entropy loss between estimated probs and gt_labels"
msgstr ""

#: of qiskit.aqua.algorithms.adaptive.vqc.vqc.cost_estimate_sigmoid:1
msgid "Calculate sigmoid cross entropy"
msgstr ""

#: of qiskit.aqua.algorithms.adaptive.vqc.vqc.cost_estimate_sigmoid:3
msgid "the number of shots used in quantum computing"
msgstr ""

#: of qiskit.aqua.algorithms.adaptive.vqc.vqc.cost_estimate_sigmoid:5
msgid "NxK array, N is the number of data and K is the number of class"
msgstr ""

#: of qiskit.aqua.algorithms.adaptive.vqc.vqc.cost_estimate_sigmoid:7
msgid "Nx1 array"
msgstr ""

#: of qiskit.aqua.algorithms.adaptive.vqc.vqc.cost_estimate_sigmoid:10
msgid "sigmoid cross entropy loss between estimated probs and gt_labels"
msgstr ""

#: of qiskit.aqua.algorithms.adaptive.vqc.vqc.return_probabilities:1
msgid ""
"Return the probabilities of given measured counts :param counts: N data "
"and each with a dict recording the counts :type counts: [dict] :param "
"num_classes: number of classes :type num_classes: int"
msgstr ""

#: of qiskit.aqua.algorithms.adaptive.vqc.vqc.return_probabilities:7
msgid "NxK array"
msgstr ""

