# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, Qiskit Development Team
# This file is distributed under the same license as the Qiskit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Qiskit \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-12 14:30+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../autodoc/qiskit.quantum_info.operators.base_operator.rst:2
msgid "qiskit.quantum\\_info.operators.base\\_operator module"
msgstr ""

#: of qiskit.quantum_info.operators.base_operator:1
msgid "Abstract BaseOperator class."
msgstr ""

#: of qiskit.quantum_info.operators.base_operator.BaseOperator:1
msgid "ベースクラス: :class:`abc.ABC`"
msgstr ""

#: of qiskit.quantum_info.operators.base_operator.BaseOperator:1
msgid "Abstract linear operator base class"
msgstr ""

#: of qiskit.quantum_info.operators.base_operator.BaseOperator.add:1
#: qiskit.quantum_info.operators.base_operator.BaseOperator.multiply:1
msgid "Return the linear operator self + other."
msgstr ""

#: of qiskit.quantum_info.operators.base_operator.BaseOperator.add
#: qiskit.quantum_info.operators.base_operator.BaseOperator.compose
#: qiskit.quantum_info.operators.base_operator.BaseOperator.expand
#: qiskit.quantum_info.operators.base_operator.BaseOperator.multiply
#: qiskit.quantum_info.operators.base_operator.BaseOperator.power
#: qiskit.quantum_info.operators.base_operator.BaseOperator.subtract
#: qiskit.quantum_info.operators.base_operator.BaseOperator.tensor
msgid "パラメータ"
msgstr ""

#: of qiskit.quantum_info.operators.base_operator.BaseOperator.add:3
#: qiskit.quantum_info.operators.base_operator.BaseOperator.compose:3
#: qiskit.quantum_info.operators.base_operator.BaseOperator.expand:3
#: qiskit.quantum_info.operators.base_operator.BaseOperator.subtract:3
msgid "an operator object."
msgstr ""

#: of qiskit.quantum_info.operators.base_operator.BaseOperator.add
#: qiskit.quantum_info.operators.base_operator.BaseOperator.compose
#: qiskit.quantum_info.operators.base_operator.BaseOperator.expand
#: qiskit.quantum_info.operators.base_operator.BaseOperator.multiply
#: qiskit.quantum_info.operators.base_operator.BaseOperator.power
#: qiskit.quantum_info.operators.base_operator.BaseOperator.subtract
#: qiskit.quantum_info.operators.base_operator.BaseOperator.tensor
msgid "戻り値"
msgstr ""

#: of qiskit.quantum_info.operators.base_operator.BaseOperator.add:6
msgid "the linear operator self + other."
msgstr ""

#: of qiskit.quantum_info.operators.base_operator.BaseOperator.add
#: qiskit.quantum_info.operators.base_operator.BaseOperator.compose
#: qiskit.quantum_info.operators.base_operator.BaseOperator.expand
#: qiskit.quantum_info.operators.base_operator.BaseOperator.multiply
#: qiskit.quantum_info.operators.base_operator.BaseOperator.power
#: qiskit.quantum_info.operators.base_operator.BaseOperator.subtract
#: qiskit.quantum_info.operators.base_operator.BaseOperator.tensor
msgid "戻り値の型"
msgstr ""

#: of qiskit.quantum_info.operators.base_operator.BaseOperator.add
#: qiskit.quantum_info.operators.base_operator.BaseOperator.compose
#: qiskit.quantum_info.operators.base_operator.BaseOperator.expand
#: qiskit.quantum_info.operators.base_operator.BaseOperator.multiply
#: qiskit.quantum_info.operators.base_operator.BaseOperator.power
#: qiskit.quantum_info.operators.base_operator.BaseOperator.subtract
#: qiskit.quantum_info.operators.base_operator.BaseOperator.tensor
msgid "raises"
msgstr ""

#: of qiskit.quantum_info.operators.base_operator.BaseOperator.add:9
#: qiskit.quantum_info.operators.base_operator.BaseOperator.subtract:9
msgid ":exc:`QiskitError` -- if other is not an operator, or has incompatible"
msgstr ""

#: of qiskit.quantum_info.operators.base_operator.BaseOperator.add:10
#: qiskit.quantum_info.operators.base_operator.BaseOperator.subtract:10
msgid ":exc:`dimensions.`"
msgstr ""

#: of qiskit.quantum_info.operators.base_operator.BaseOperator.adjoint:1
msgid "Return the adjoint of the operator."
msgstr ""

#: of qiskit.quantum_info.operators.base_operator.BaseOperator.compose:1
msgid "Return the composition channel self∘other."
msgstr ""

#: of qiskit.quantum_info.operators.base_operator.BaseOperator.compose:5
msgid "a list of subsystem positions to compose other on."
msgstr ""

#: of qiskit.quantum_info.operators.base_operator.BaseOperator.compose:7
msgid ""
"If False compose in standard order other(self(input)) otherwise compose "
"in reverse order self(other(input)) [default: False]"
msgstr ""

#: of qiskit.quantum_info.operators.base_operator.BaseOperator.compose:12
msgid "The composed operator."
msgstr ""

#: of qiskit.quantum_info.operators.base_operator.BaseOperator.compose:15
msgid ":exc:`QiskitError` -- if other cannot be converted to an operator, or has"
msgstr ""

#: of qiskit.quantum_info.operators.base_operator.BaseOperator.compose:16
msgid "incompatible dimensions for specified subsystems."
msgstr ""

#: of qiskit.quantum_info.operators.base_operator.BaseOperator.conjugate:1
msgid "Return the conjugate of the operator."
msgstr ""

#: of qiskit.quantum_info.operators.base_operator.BaseOperator.copy:1
msgid "Make a copy of current operator."
msgstr ""

#: of qiskit.quantum_info.operators.base_operator.BaseOperator.data:1
msgid "Return data."
msgstr ""

#: of qiskit.quantum_info.operators.base_operator.BaseOperator.dim:1
msgid "Return tuple (input_shape, output_shape)."
msgstr ""

#: of qiskit.quantum_info.operators.base_operator.BaseOperator.expand:1
msgid "Return the tensor product operator other ⊗ self."
msgstr ""

#: of qiskit.quantum_info.operators.base_operator.BaseOperator.expand:6
msgid "the tensor product operator other ⊗ self."
msgstr ""

#: of qiskit.quantum_info.operators.base_operator.BaseOperator.expand:9
#: qiskit.quantum_info.operators.base_operator.BaseOperator.tensor:9
msgid ":exc:`QiskitError` -- if other is not an operator."
msgstr ""

#: of qiskit.quantum_info.operators.base_operator.BaseOperator.input_dims:1
msgid "Return tuple of input dimension for specified subsystems."
msgstr ""

#: of qiskit.quantum_info.operators.base_operator.BaseOperator.is_unitary:1
msgid "Return True if operator is a unitary matrix."
msgstr ""

#: of qiskit.quantum_info.operators.base_operator.BaseOperator.multiply:3
msgid "a complex number."
msgstr ""

#: of qiskit.quantum_info.operators.base_operator.BaseOperator.multiply:6
msgid "the linear operator other * self."
msgstr ""

#: of qiskit.quantum_info.operators.base_operator.BaseOperator.multiply:9
msgid ":exc:`QiskitError` -- if other is not a valid complex number."
msgstr ""

#: of qiskit.quantum_info.operators.base_operator.BaseOperator.output_dims:1
msgid "Return tuple of output dimension for specified subsystems."
msgstr ""

#: of qiskit.quantum_info.operators.base_operator.BaseOperator.power:1
msgid "Return the compose of a operator with itself n times."
msgstr ""

#: of qiskit.quantum_info.operators.base_operator.BaseOperator.power:3
msgid "the number of times to compose with self (n>0)."
msgstr ""

#: of qiskit.quantum_info.operators.base_operator.BaseOperator.power:6
msgid "the n-times composed operator."
msgstr ""

#: of qiskit.quantum_info.operators.base_operator.BaseOperator.power:9
msgid ":exc:`QiskitError` -- if the input and output dimensions of the operator"
msgstr ""

#: of qiskit.quantum_info.operators.base_operator.BaseOperator.power:10
msgid "are not equal, or the power is not a positive integer."
msgstr ""

#: of qiskit.quantum_info.operators.base_operator.BaseOperator.rep:1
msgid "Return operator representation string."
msgstr ""

#: of qiskit.quantum_info.operators.base_operator.BaseOperator.subtract:1
msgid "Return the linear operator self - other."
msgstr ""

#: of qiskit.quantum_info.operators.base_operator.BaseOperator.subtract:6
msgid "the linear operator self - other."
msgstr ""

#: of qiskit.quantum_info.operators.base_operator.BaseOperator.tensor:1
msgid "Return the tensor product operator self ⊗ other."
msgstr ""

#: of qiskit.quantum_info.operators.base_operator.BaseOperator.tensor:3
msgid "a operator subclass object."
msgstr ""

#: of qiskit.quantum_info.operators.base_operator.BaseOperator.tensor:6
msgid "the tensor product operator self ⊗ other."
msgstr ""

#: of qiskit.quantum_info.operators.base_operator.BaseOperator.to_operator:1
msgid "Convert operator to matrix operator class"
msgstr ""

#: of qiskit.quantum_info.operators.base_operator.BaseOperator.transpose:1
msgid "Return the transpose of the operator."
msgstr ""

