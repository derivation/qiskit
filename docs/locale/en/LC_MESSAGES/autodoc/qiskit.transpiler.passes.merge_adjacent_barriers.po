# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, Qiskit Development Team
# This file is distributed under the same license as the Qiskit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Qiskit \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-12 14:30+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../autodoc/qiskit.transpiler.passes.merge_adjacent_barriers.rst:2
msgid "qiskit.transpiler.passes.merge\\_adjacent\\_barriers module"
msgstr ""

#: of qiskit.transpiler.passes.merge_adjacent_barriers:1
msgid "A pass that merges any adjacent barriers into one"
msgstr ""

#: of qiskit.transpiler.passes.merge_adjacent_barriers:3
msgid ""
"Only barriers which can be merged without affecting the barrier structure"
" of the DAG will be merged."
msgstr ""

#: of qiskit.transpiler.passes.merge_adjacent_barriers:6
msgid ""
"Not all redundant barriers will necessarily be merged, only adjacent "
"barriers are merged."
msgstr ""

#: of qiskit.transpiler.passes.merge_adjacent_barriers:8
msgid ""
"For example, the circuit qr = QuantumRegister(3, 'q') circuit = "
"QuantumCircuit(qr) circuit.barrier(qr[0]) circuit.barrier(qr[1]) "
"circuit.barrier(qr)"
msgstr ""

#: of qiskit.transpiler.passes.merge_adjacent_barriers:15
msgid ""
"Will be transformed into a circuit corresponding to "
"circuit.barrier(qr[0]) circuit.barrier(qr) after one iteration of the "
"pass. These two barriers were not merged by the first pass as they are "
"not adjacent in the initial circuit."
msgstr ""

#: of qiskit.transpiler.passes.merge_adjacent_barriers:21
msgid "The pass then can be reapplied to merge the newly adjacent barriers."
msgstr ""

#: of qiskit.transpiler.passes.merge_adjacent_barriers.MergeAdjacentBarriers:1
msgid "ベースクラス: :class:`qiskit.transpiler.basepasses.TransformationPass`"
msgstr ""

#: of qiskit.transpiler.passes.merge_adjacent_barriers.MergeAdjacentBarriers:1
msgid "Returns a circuit with any adjacent barriers merged together"
msgstr ""

#: of
#: qiskit.transpiler.passes.merge_adjacent_barriers.MergeAdjacentBarriers.run:1
msgid ""
"Run a pass on the DAGCircuit. This is implemented by the pass developer. "
":param dag: the dag on which the pass is run. :type dag: DAGCircuit"
msgstr ""

#: of
#: qiskit.transpiler.passes.merge_adjacent_barriers.MergeAdjacentBarriers.run
msgid "raises"
msgstr ""

#: of
#: qiskit.transpiler.passes.merge_adjacent_barriers.MergeAdjacentBarriers.run:5
msgid ":exc:`NotImplementedError` -- when this is left unimplemented for a pass."
msgstr ""

