# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, Qiskit Development Team
# This file is distributed under the same license as the Qiskit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Qiskit \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-12 14:30+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../autodoc/qiskit.dagcircuit.dagcircuit.rst:2
msgid "qiskit.dagcircuit.dagcircuit module"
msgstr ""

#: of qiskit.dagcircuit.dagcircuit:1
msgid "Object to represent a quantum circuit as a directed acyclic graph."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit:3
msgid ""
"The nodes in the graph are either input/output nodes or operation nodes. "
"The edges correspond to qubits or bits in the circuit. A directed edge "
"from node A to node B means that the (qu)bit passes from the output of A "
"to the input of B. The object's methods allow circuits to be constructed,"
" composed, and modified. Some natural properties like depth can be "
"computed directly from the graph."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit:1
msgid "ベースクラス: :class:`object`"
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit:1
msgid "Quantum circuit as a directed acyclic graph."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit:3
msgid ""
"There are 3 types of nodes in the graph: inputs, outputs, and operations."
" The nodes are connected by directed edges that correspond to qubits and "
"bits."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.add_creg:1
msgid "Add all wires in a classical register."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.add_qreg:1
msgid "Add all wires in a quantum register."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.ancestors:1
msgid "Returns set of the ancestors of a node as DAGNodes."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.apply_operation_back:1
msgid "Apply an operation to the output of the circuit."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.apply_operation_back
#: qiskit.dagcircuit.dagcircuit.DAGCircuit.apply_operation_front
#: qiskit.dagcircuit.dagcircuit.DAGCircuit.compose_back
#: qiskit.dagcircuit.dagcircuit.DAGCircuit.compose_front
#: qiskit.dagcircuit.dagcircuit.DAGCircuit.node
#: qiskit.dagcircuit.dagcircuit.DAGCircuit.nodes_on_wire
#: qiskit.dagcircuit.dagcircuit.DAGCircuit.op_nodes
#: qiskit.dagcircuit.dagcircuit.DAGCircuit.substitute_node_with_dag
msgid "パラメータ"
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.apply_operation_back:3
#: qiskit.dagcircuit.dagcircuit.DAGCircuit.apply_operation_front:3
msgid "the operation associated with the DAG node"
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.apply_operation_back:5
#: qiskit.dagcircuit.dagcircuit.DAGCircuit.apply_operation_front:5
msgid "qubits that op will be applied to"
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.apply_operation_back:7
#: qiskit.dagcircuit.dagcircuit.DAGCircuit.apply_operation_front:7
msgid "cbits that op will be applied to"
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.apply_operation_back:9
msgid "optional condition (ClassicalRegister, int)"
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.apply_operation_back
#: qiskit.dagcircuit.dagcircuit.DAGCircuit.apply_operation_front
#: qiskit.dagcircuit.dagcircuit.DAGCircuit.gate_nodes
#: qiskit.dagcircuit.dagcircuit.DAGCircuit.node
#: qiskit.dagcircuit.dagcircuit.DAGCircuit.op_nodes
#: qiskit.dagcircuit.dagcircuit.DAGCircuit.topological_nodes
#: qiskit.dagcircuit.dagcircuit.DAGCircuit.topological_op_nodes
msgid "戻り値"
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.apply_operation_back:12
#: qiskit.dagcircuit.dagcircuit.DAGCircuit.apply_operation_front:12
msgid "the current max node"
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.apply_operation_back
#: qiskit.dagcircuit.dagcircuit.DAGCircuit.apply_operation_front
#: qiskit.dagcircuit.dagcircuit.DAGCircuit.gate_nodes
#: qiskit.dagcircuit.dagcircuit.DAGCircuit.node
#: qiskit.dagcircuit.dagcircuit.DAGCircuit.op_nodes
#: qiskit.dagcircuit.dagcircuit.DAGCircuit.topological_nodes
#: qiskit.dagcircuit.dagcircuit.DAGCircuit.topological_op_nodes
msgid "戻り値の型"
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.apply_operation_back
#: qiskit.dagcircuit.dagcircuit.DAGCircuit.apply_operation_front
#: qiskit.dagcircuit.dagcircuit.DAGCircuit.compose_back
#: qiskit.dagcircuit.dagcircuit.DAGCircuit.compose_front
#: qiskit.dagcircuit.dagcircuit.DAGCircuit.depth
#: qiskit.dagcircuit.dagcircuit.DAGCircuit.nodes_on_wire
#: qiskit.dagcircuit.dagcircuit.DAGCircuit.substitute_node_with_dag
msgid "raises"
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.apply_operation_back:15
msgid ":exc:`DAGCircuitError` -- if a leaf node is connected to multiple outputs"
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.apply_operation_front:1
msgid "Apply an operation to the input of the circuit."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.apply_operation_front:9
msgid "optional condition (ClassicalRegister, value)"
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.apply_operation_front:15
msgid ":exc:`DAGCircuitError` -- if initial nodes connected to multiple out edges"
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.bfs_successors:1
msgid ""
"Returns an iterator of tuples of (DAGNode, [DAGNodes]) where the DAGNode "
"is the current node and [DAGNode] is its successors in  BFS order."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.clbits:1
msgid "Return a list of bits as (ClassicalRegister, index) pairs."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.collect_runs:1
msgid "Return a set of non-conditional runs of \"op\" nodes with the given names."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.collect_runs:3
msgid ""
"For example, \"... h q[0]; cx q[0],q[1]; cx q[0],q[1]; h q[1]; ..\" would"
" produce the tuple of cx nodes as an element of the set returned from a "
"call to collect_runs([\"cx\"]). If instead the cx nodes were \"cx "
"q[0],q[1]; cx q[1],q[0];\", the method would still return the pair in a "
"tuple. The namelist can contain names that are not in the circuit's "
"basis."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.collect_runs:10
msgid "Nodes must have only one successor to continue the run."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.compose_back:1
msgid "Apply the input circuit to the output of this circuit."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.compose_back:3
msgid ""
"The two bases must be \"compatible\" or an exception occurs. A subset of "
"input qubits of the input circuit are mapped to a subset of output qubits"
" of this circuit."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.compose_back:7
#: qiskit.dagcircuit.dagcircuit.DAGCircuit.compose_front:7
msgid "circuit to append"
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.compose_back:9
#: qiskit.dagcircuit.dagcircuit.DAGCircuit.compose_front:9
msgid ""
"map {(Register, int): (Register, int)} from the output wires of "
"input_circuit to input wires of self."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.compose_back:14
msgid ":exc:`DAGCircuitError` -- if missing, duplicate or incosistent wire"
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.compose_front:1
msgid "Apply the input circuit to the input of this circuit."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.compose_front:3
msgid ""
"The two bases must be \"compatible\" or an exception occurs. A subset of "
"output qubits of the input circuit are mapped to a subset of input qubits"
" of this circuit."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.compose_front:14
msgid ":exc:`DAGCircuitError` -- missing, duplicate or inconsistent wire"
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.count_ops:1
msgid "Count the occurrences of operation names."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.count_ops:3
msgid "Returns a dictionary of counts keyed on the operation name."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.depth:1
msgid "Return the circuit depth. :returns: the circuit depth :rtype: int"
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.depth:5
msgid ":exc:`DAGCircuitError` -- if not a directed acyclic graph"
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.descendants:1
msgid "Returns set of the descendants of a node as DAGNodes."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.edges:1
#: qiskit.dagcircuit.dagcircuit.DAGCircuit.nodes:1
msgid "Iterator for node values."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.edges
#: qiskit.dagcircuit.dagcircuit.DAGCircuit.nodes
#: qiskit.dagcircuit.dagcircuit.DAGCircuit.nodes_on_wire
msgid "Yields"
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.edges:3
#: qiskit.dagcircuit.dagcircuit.DAGCircuit.nodes:3
msgid "*node* -- the node."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.extend_back:1
msgid "Add `dag` at the end of `self`, using `edge_map`."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.gate_nodes:1
msgid "Get the list of gate nodes in the dag."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.gate_nodes:3
msgid "the list of node ids that represent gates."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.get_2q_nodes:1
msgid "Deprecated. Use twoQ_gates()."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.get_3q_or_more_nodes:1
msgid "Deprecated. Use threeQ_or_more_gates()."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.get_bits:1
msgid "Deprecated. Use clbits()."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.get_gate_nodes:1
msgid "Deprecated. Use gate_nodes()."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.get_named_nodes:1
msgid "Deprecated. Use named_nodes()."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.get_op_nodes:1
msgid "Deprecated. Use op_nodes()."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.get_qubits:1
msgid "Deprecated. Use qubits()."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.layers:1
msgid ""
"Yield a shallow view on a layer of this DAGCircuit for all d layers of "
"this circuit."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.layers:3
msgid ""
"A layer is a circuit whose gates act on disjoint qubits, i.e. a layer has"
" depth 1. The total number of layers equals the circuit depth d. The "
"layers are indexed from 0 to d-1 with the earliest layer at index 0. The "
"layers are constructed using a greedy algorithm. Each returned layer is a"
" dict containing {\"graph\": circuit graph, \"partition\": list of qubit "
"lists}."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.layers:10
msgid ""
"TODO: Gates that use the same cbits will end up in different layers as "
"this is currently implemented. This may not be the desired behavior."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.multi_graph:1
msgid "Deprecated. Returns internal multi_graph."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.multigraph_layers:1
msgid "Yield layers of the multigraph."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.named_nodes:1
msgid "Get the set of \"op\" nodes with the given name."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.node:1
msgid "Get the node in the dag."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.node:3
msgid "Node identifier."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.node:6
msgid "the node."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.node_counter:1
msgid "Deprecated usage to return max node id, now returns size of DAG"
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.nodes_on_wire:1
msgid "Iterator for nodes that affect a given wire"
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.nodes_on_wire:3
msgid "the wire to be looked at."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.nodes_on_wire:5
msgid "True if only the ops nodes are wanted otherwise all nodes are returned."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.nodes_on_wire:9
msgid "*DAGNode* -- the successive ops on the given wire"
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.nodes_on_wire:11
msgid ":exc:`DAGCircuitError` -- if the given wire doesn't exist in the DAG"
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.num_cbits:1
msgid "Return the total number of bits used by the circuit."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.num_tensor_factors:1
msgid "Compute how many components the circuit can decompose into."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.op_nodes:1
msgid "Get the list of \"op\" nodes in the dag."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.op_nodes:3
msgid "Instruction subclass op nodes to return. if op=None, return all op nodes."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.op_nodes:7
msgid "the list of node ids containing the given op."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.predecessors:1
msgid "Returns list of the predecessors of a node as DAGNodes."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.properties:1
msgid "Return a dictionary of circuit properties."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.qasm:1
msgid ""
"Deprecated. use qiskit.converters.dag_to_circuit() then call qasm() on "
"the obtained QuantumCircuit instance."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.quantum_predecessors:1
msgid ""
"Returns list of the predecessors of a node that are connected by a "
"quantum edge as DAGNodes."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.quantum_successors:1
msgid ""
"Returns list of the successors of a node that are connected by a quantum "
"edge as DAGNodes."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.qubits:1
msgid "Return a list of qubits as (QuantumRegister, index) pairs."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.remove_all_ops_named:1
msgid "Remove all operation nodes with the given name."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.remove_ancestors_of:1
msgid "Remove all of the ancestor operation nodes of node."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.remove_descendants_of:1
msgid "Remove all of the descendant operation nodes of node."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.remove_nonancestors_of:1
msgid "Remove all of the non-ancestors operation nodes of node."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.remove_nondescendants_of:1
msgid "Remove all of the non-descendants operation nodes of node."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.remove_op_node:1
msgid "Remove an operation node n."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.remove_op_node:3
msgid "Add edges from predecessors to successors."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.rename_register:1
msgid "Rename a classical or quantum register throughout the circuit."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.rename_register:3
msgid ""
"regname = existing register name string newname = replacement register "
"name string"
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.serial_layers:1
msgid "Yield a layer for all gates of this circuit."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.serial_layers:3
msgid ""
"A serial layer is a circuit with one gate. The layers have the same "
"structure as in layers()."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.size:1
msgid "Return the number of operations."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.substitute_node_with_dag:1
msgid "Replace one node with dag."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.substitute_node_with_dag:3
msgid "node to substitute"
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.substitute_node_with_dag:5
msgid "circuit that will substitute the node"
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.substitute_node_with_dag:7
msgid ""
"gives an order for (qu)bits in the input circuit. This order gets matched"
" to the node wires by qargs first, then cargs, then conditions."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.substitute_node_with_dag:12
msgid ":exc:`DAGCircuitError` -- if met with unexpected predecessor/successors"
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.successors:1
msgid "Returns list of the successors of a node as DAGNodes."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.threeQ_or_more_gates:1
msgid "Get list of 3-or-more-qubit gates: (id, data)."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.to_networkx:1
msgid "Returns a copy of the DAGCircuit in networkx format."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.topological_nodes:1
msgid "Yield nodes in topological order."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.topological_nodes:3
msgid "node in topological order"
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.topological_op_nodes:1
msgid "Yield op nodes in topological order."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.topological_op_nodes:3
msgid "op node in topological order"
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.twoQ_gates:1
msgid "Get list of 2-qubit gates. Ignore snapshot, barriers, and the like."
msgstr ""

#: of qiskit.dagcircuit.dagcircuit.DAGCircuit.width:1
msgid "Return the total number of qubits used by the circuit."
msgstr ""

