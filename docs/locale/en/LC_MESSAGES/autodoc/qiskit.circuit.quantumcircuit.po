# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, Qiskit Development Team
# This file is distributed under the same license as the Qiskit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Qiskit \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-12 14:30+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../autodoc/qiskit.circuit.quantumcircuit.rst:2
msgid "qiskit.circuit.quantumcircuit module"
msgstr ""

#: of qiskit.circuit.quantumcircuit:1
msgid "Quantum circuit object."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit:1
msgid "ベースクラス: :class:`object`"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit:1
msgid "Quantum circuit."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.AND:1
msgid "Build a collective conjunction (AND) circuit in place using mct."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.AND
#: qiskit.circuit.quantumcircuit.QuantumCircuit.OR
#: qiskit.circuit.quantumcircuit.QuantumCircuit.append
#: qiskit.circuit.quantumcircuit.QuantumCircuit.bind_parameters
#: qiskit.circuit.quantumcircuit.QuantumCircuit.ch
#: qiskit.circuit.quantumcircuit.QuantumCircuit.copy
#: qiskit.circuit.quantumcircuit.QuantumCircuit.cry
#: qiskit.circuit.quantumcircuit.QuantumCircuit.draw
#: qiskit.circuit.quantumcircuit.QuantumCircuit.from_qasm_file
#: qiskit.circuit.quantumcircuit.QuantumCircuit.from_qasm_str
#: qiskit.circuit.quantumcircuit.QuantumCircuit.has_register
#: qiskit.circuit.quantumcircuit.QuantumCircuit.mcry
#: qiskit.circuit.quantumcircuit.QuantumCircuit.measure
#: qiskit.circuit.quantumcircuit.QuantumCircuit.num_connected_components
#: qiskit.circuit.quantumcircuit.QuantumCircuit.to_instruction
msgid "パラメータ"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.AND:3
msgid "The QuantumCircuit object to build the conjunction on."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.AND:5
#: qiskit.circuit.quantumcircuit.QuantumCircuit.OR:5
msgid "The QuantumRegister holding the variable qubits."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.AND:7
#: qiskit.circuit.quantumcircuit.QuantumCircuit.OR:7
msgid "A list of +1/-1/0 to mark negations or omissions of qubits."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.AND:9
msgid "The target qubit to hold the conjunction result."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.AND:11
#: qiskit.circuit.quantumcircuit.QuantumCircuit.OR:11
msgid "The ancillary QuantumRegister for building the mct."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.AND:13
#: qiskit.circuit.quantumcircuit.QuantumCircuit.OR:13
msgid "The mct building mode."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.OR:1
msgid "Build a collective disjunction (OR) circuit in place using mct."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.OR:3
msgid "The QuantumCircuit object to build the disjunction on."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.OR:9
msgid "The target qubit to hold the disjunction result."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.add_register:1
msgid "Add registers."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.append:1
msgid ""
"Append an instruction to the end of the circuit, modifying the circuit in"
" place."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.append:4
msgid "Instruction instance to append"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.append:6
msgid "qubits to attach instruction to"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.append:8
msgid "clbits to attach instruction to"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.append
#: qiskit.circuit.quantumcircuit.QuantumCircuit.bind_parameters
#: qiskit.circuit.quantumcircuit.QuantumCircuit.copy
#: qiskit.circuit.quantumcircuit.QuantumCircuit.count_ops
#: qiskit.circuit.quantumcircuit.QuantumCircuit.decompose
#: qiskit.circuit.quantumcircuit.QuantumCircuit.depth
#: qiskit.circuit.quantumcircuit.QuantumCircuit.draw
#: qiskit.circuit.quantumcircuit.QuantumCircuit.from_qasm_file
#: qiskit.circuit.quantumcircuit.QuantumCircuit.from_qasm_str
#: qiskit.circuit.quantumcircuit.QuantumCircuit.has_register
#: qiskit.circuit.quantumcircuit.QuantumCircuit.inverse
#: qiskit.circuit.quantumcircuit.QuantumCircuit.measure
#: qiskit.circuit.quantumcircuit.QuantumCircuit.mirror
#: qiskit.circuit.quantumcircuit.QuantumCircuit.num_connected_components
#: qiskit.circuit.quantumcircuit.QuantumCircuit.size
#: qiskit.circuit.quantumcircuit.QuantumCircuit.to_instruction
#: qiskit.circuit.quantumcircuit.QuantumCircuit.width
msgid "戻り値"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.append:11
msgid "a handle to the instruction that was just added"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.append
#: qiskit.circuit.quantumcircuit.QuantumCircuit.bind_parameters
#: qiskit.circuit.quantumcircuit.QuantumCircuit.copy
#: qiskit.circuit.quantumcircuit.QuantumCircuit.count_ops
#: qiskit.circuit.quantumcircuit.QuantumCircuit.decompose
#: qiskit.circuit.quantumcircuit.QuantumCircuit.depth
#: qiskit.circuit.quantumcircuit.QuantumCircuit.draw
#: qiskit.circuit.quantumcircuit.QuantumCircuit.from_qasm_file
#: qiskit.circuit.quantumcircuit.QuantumCircuit.from_qasm_str
#: qiskit.circuit.quantumcircuit.QuantumCircuit.has_register
#: qiskit.circuit.quantumcircuit.QuantumCircuit.inverse
#: qiskit.circuit.quantumcircuit.QuantumCircuit.measure
#: qiskit.circuit.quantumcircuit.QuantumCircuit.mirror
#: qiskit.circuit.quantumcircuit.QuantumCircuit.num_connected_components
#: qiskit.circuit.quantumcircuit.QuantumCircuit.size
#: qiskit.circuit.quantumcircuit.QuantumCircuit.to_instruction
#: qiskit.circuit.quantumcircuit.QuantumCircuit.width
msgid "戻り値の型"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.append
#: qiskit.circuit.quantumcircuit.QuantumCircuit.bind_parameters
#: qiskit.circuit.quantumcircuit.QuantumCircuit.draw
#: qiskit.circuit.quantumcircuit.QuantumCircuit.inverse
#: qiskit.circuit.quantumcircuit.QuantumCircuit.measure
msgid "raises"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.append:14
msgid ""
":exc:`QiskitError` -- if the gate is of a different shape than the wires "
"it is being attached to."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.barrier:1
msgid ""
"Apply barrier to circuit. If qargs is None, applies to all the qbits. "
"Args is a list of QuantumRegister or single qubits. For QuantumRegister, "
"applies barrier to all the qubits in that register."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.bind_parameters:1
msgid "Assign parameters to values yielding a new circuit."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.bind_parameters:3
msgid "{parameter: value, ...}"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.bind_parameters:6
msgid ""
":exc:`QiskitError` -- If value_dict contains parameters not present in "
"the circuit"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.bind_parameters:8
msgid "copy of self with assignment substitution."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.ccx:1
msgid "Apply Toffoli to from ctl1 and ctl2 to tgt."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.ch:1
msgid "Apply Controlled-Hadamard (ch) Gate."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.ch:3
msgid ""
"Note that this implementation of the ch uses a single cx gate, which is "
"more efficient than what's currently provided in Terra."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.ch:6
#: qiskit.circuit.quantumcircuit.QuantumCircuit.cry:3
#: qiskit.circuit.quantumcircuit.QuantumCircuit.mcry:3
msgid "The circuit to apply the ch gate on."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.ch:8
#: qiskit.circuit.quantumcircuit.QuantumCircuit.cry:7
msgid "The control qubit."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.ch:10
#: qiskit.circuit.quantumcircuit.QuantumCircuit.cry:9
#: qiskit.circuit.quantumcircuit.QuantumCircuit.mcry:9
msgid "The target qubit."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.clbits:1
msgid ""
"Returns a list of classical bits in the order that the registers had been"
" added."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.cls_instances:1
msgid ""
"Return the current number of instances of this class, useful for auto "
"naming."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.cls_prefix:1
msgid "Return the prefix to use for auto naming."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.combine:1
#: qiskit.circuit.quantumcircuit.QuantumCircuit.extend:1
msgid "Append rhs to self if self contains compatible registers."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.combine:3
#: qiskit.circuit.quantumcircuit.QuantumCircuit.extend:3
msgid ""
"Two circuits are compatible if they contain the same registers or if they"
" contain different registers with unique names. The returned circuit will"
" contain all unique registers between both circuits."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.combine:8
msgid "Return self + rhs as a new object."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.copy:1
msgid ""
"name to be given to the copied circuit, if None then the name stays the "
"same"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.copy:4
msgid ""
"a deepcopy of the current circuit, with the name updated if"
"                 it was provided"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.copy:6
msgid "a deepcopy of the current circuit, with the name updated if"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.copy:7
msgid "it was provided"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.count_ops:1
msgid "Count each operation kind in the circuit."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.count_ops:3
msgid "a breakdown of how many operations of each kind."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.cry:1
msgid "Apply Controlled-RY (cry) Gate."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.cry:5
#: qiskit.circuit.quantumcircuit.QuantumCircuit.mcry:5
msgid "The rotation angle."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.crz:1
msgid "Apply crz from ctl to tgt with angle theta."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.cswap:1
msgid "Apply Fredkin to circuit."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.cu1:1
msgid "Apply cu1 from ctl to tgt with angle theta."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.cu3:1
msgid "Apply cu3 from ctl to tgt with angle theta, phi, lam."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.cx:1
msgid "Apply CX from ctl to tgt."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.cx_base:1
msgid "Apply CX ctl, tgt."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.cy:1
msgid "Apply CY to circuit."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.cz:1
msgid "Apply CZ to circuit."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.decompose:1
msgid ""
"Call a decomposition pass on this circuit, to decompose one level "
"(shallow decompose)."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.decompose:4
msgid "a circuit one level decomposed"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.depth:1
msgid ""
"Return circuit depth (i.e. length of critical path). This does not "
"include compiler or simulator directives such as 'barrier' or 'snapshot'."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.depth:5
msgid "Depth of circuit."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.depth:9
#: qiskit.circuit.quantumcircuit.QuantumCircuit.num_tensor_factors:5
msgid "メモ"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.depth:10
msgid "The circuit depth and the DAG depth need not bt the same."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.draw:1
msgid "Draw the quantum circuit"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.draw:3
msgid ""
"Using the output parameter you can specify the format. The choices are: "
"0. text: ASCII art string 1. latex: high-quality images, but heavy "
"external software dependencies 2. matplotlib: purely in Python with no "
"external dependencies"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.draw:8
msgid "Defaults to an overcomplete basis, in order to not alter gates."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.draw:10
msgid "scale of image to draw (shrink if < 1)"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.draw:12
msgid "file path to save image to"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.draw:14
msgid ""
"dictionary of style or file name of style file. You can refer to the "
":ref:`Style Dict Doc <style-dict-doc>` for more information on the "
"contents."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.draw:19
msgid ""
"Select the output method to use for drawing the circuit. Valid choices "
"are `text`, `latex`, `latex_source`, `mpl`. By default the 'text' drawer "
"is used unless a user config file has an alternative backend set as the "
"default. If the output is passed in that backend will always be used."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.draw:25
msgid ""
"when set true show the circuit in a new window (for `mpl` this depends on"
" the matplotlib backend being used supporting this). Note when used with "
"either the `text` or the `latex_source` output type this has no effect "
"and will be silently ignored."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.draw:31
msgid "sets the length of the lines generated by `text`"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.draw:33
msgid ""
"When set to True reverse the bit order inside registers for the output "
"visualization."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.draw:36
msgid "Enable/disable drawing barriers in the output circuit. Defaults to True."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.draw:39
msgid ""
"Options are `left`, `right` or `none`, if anything else is supplied it "
"defaults to left justified. It refers to where gates should be placed in "
"the output circuit if there is an option. `none` results in each gate "
"being placed in its own column. Currently only supported by text drawer."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.draw:46
msgid ""
"* PIL.Image: (output `latex`) an in-memory representation of the   image "
"of the circuit diagram. * matplotlib.figure: (output `mpl`) a matplotlib "
"figure object   for the circuit diagram. * str: (output `latex_source`). "
"The LaTeX source code. * TextDrawing: (output `text`). A drawing that can"
" be printed as   ascii art"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.draw:48
msgid ""
"PIL.Image: (output `latex`) an in-memory representation of the image of "
"the circuit diagram."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.draw:50
msgid ""
"matplotlib.figure: (output `mpl`) a matplotlib figure object for the "
"circuit diagram."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.draw:52
msgid "str: (output `latex_source`). The LaTeX source code."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.draw:53
msgid "TextDrawing: (output `text`). A drawing that can be printed as ascii art"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.draw:57
msgid ":exc:`VisualizationError` -- when an invalid output method is selected"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.extend:8
msgid "Modify and return self."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.from_qasm_file:1
msgid "Take in a QASM file and generate a QuantumCircuit object."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.from_qasm_file:3
msgid "Path to the file for a QASM program"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.from_qasm_file:6
#: qiskit.circuit.quantumcircuit.QuantumCircuit.from_qasm_str:6
msgid "The QuantumCircuit object for the input QASM"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.from_qasm_str:1
msgid "Take in a QASM string and generate a QuantumCircuit object."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.from_qasm_str:3
msgid "A QASM program string"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.h:1
msgid "Apply H to q."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.has_register:1
msgid "Test if this circuit has the register r."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.has_register:3
msgid "a quantum or classical register."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.has_register:6
msgid "True if the register is contained in this circuit."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.iden:1
msgid "Apply Identity to q."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.initialize:1
msgid "Apply initialize to circuit."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.inverse:1
msgid "Invert this circuit."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.inverse:3
msgid "This is done by recursively inverting all gates."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.inverse:5
msgid "the inverted circuit"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.inverse:8
msgid ":exc:`QiskitError` -- if the circuit cannot be inverted."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.mcmt:1
msgid ""
"Apply a Multi-Control, Multi-Target using a generic gate. It can also be "
"used to implement a generic Multi-Control gate, as the target could also "
"be of length 1. :param q_controls: The list of control qubits :param "
"q_ancillae: The list of ancillary qubits :param single_control_gate_fun: "
"The single control gate function (e.g QuantumCircuit.cz or "
"QuantumCircuit.ch) :param q_targets: A list of qubits or a "
"QuantumRegister to which the gate function should be applied. :param "
"mode: The implementation mode to use (at the moment, only the basic mode "
"is supported) :type mode: string"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.mcry:1
msgid "Apply Multiple-Control RY (mcry) Gate."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.mcry:7
msgid "The control qubits."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.mcry:11
msgid "The ancillary qubits."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.mct:1
msgid ""
"Apply Multiple-Control Toffoli operation :param q_controls: The list of "
"control qubits :param q_target: The target qubit :param q_ancilla: The "
"list of ancillary qubits :param mode: The implementation mode to use "
":type mode: string"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.mcu1:1
msgid ""
"Apply Multiple-Controlled U1 gate :param theta: angle theta :param "
"control_qubits: The list of control qubits :param target_qubit: The "
"target qubit"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.mcu3:1
msgid ""
"Apply Multiple-Controlled U3 gate :param theta: angle theta :param phi: "
"angle phi :param lam: angle lambda :param control_qubits: The list of "
"control qubits :param target_qubit: The target qubit"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.measure:1
msgid "Measure quantum bit into classical bit (tuples)."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.measure:3
msgid "quantum register"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.measure:5
msgid "classical register"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.measure:8
msgid "the attached measure instruction."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.measure:11
msgid ""
":exc:`QiskitError` -- if qubit is not in this circuit or bad format; if "
"cbit is not in this circuit or not creg."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.mirror:1
msgid "Mirror the circuit by reversing the instructions."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.mirror:3
msgid ""
"This is done by recursively mirroring all instructions. It does not "
"invert any gate."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.mirror:6
msgid "the mirrored circuit"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.num_connected_components:1
msgid "How many non-entangled subcircuits can the circuit be factored to."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.num_connected_components:3
msgid "Compute only unitary part of graph."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.num_connected_components:6
msgid "Number of connected components in circuit."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.num_tensor_factors:1
#: qiskit.circuit.quantumcircuit.QuantumCircuit.num_unitary_factors:1
msgid ""
"Computes the number of tensor factors in the unitary (quantum) part of "
"the circuit only."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.num_tensor_factors:6
msgid ""
"This is here for backwards compatibility, and will be removed in a future"
" release of qiskit. You should call `num_unitary_factors` instead."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.parameters:1
msgid "convenience function to get the parameters defined in the parameter table"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.qasm:1
msgid "Return OpenQASM string."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.qubits:1
msgid ""
"Returns a list of quantum bits in the order that the registers had been "
"added."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.reset:1
msgid "Reset q."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.rx:1
msgid "Apply Rx to q."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.ry:1
msgid "Apply Ry to q."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.rz:1
msgid "Apply Rz to q."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.rzz:1
msgid "Apply RZZ to circuit."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.s:1
msgid "Apply S to q."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.sdg:1
msgid "Apply Sdg to q."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.size:1
msgid "Returns total number of gate operations in circuit."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.size:3
msgid "Total number of gate operations."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.swap:1
msgid "Apply SWAP from qubit1 to qubit2."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.t:1
msgid "Apply T to q."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.tdg:1
msgid "Apply Tdg to q."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.to_instruction:1
msgid "Create an Instruction out of this circuit."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.to_instruction:3
msgid ""
"For parameterized circuits, a mapping from parameters in the circuit to "
"parameters to be used in the instruction. If None, existing circuit "
"parameters will also parameterize the instruction."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.to_instruction:9
msgid ""
"a composite instruction encapsulating this circuit     (can be decomposed"
" back)"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.to_instruction:11
msgid "a composite instruction encapsulating this circuit"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.to_instruction:12
msgid "(can be decomposed back)"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.u0:1
msgid "Apply u0 with length m to q."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.u1:1
msgid "Apply u1 with angle theta to q."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.u2:1
#: qiskit.circuit.quantumcircuit.QuantumCircuit.unitary:1
msgid "Apply u2 to q."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.u3:1
msgid "Apply u3 to q."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.u_base:1
msgid "Apply U to q."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.width:1
msgid "Return number of qubits plus clbits in circuit."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.width:3
msgid "Width of circuit."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.x:1
msgid "Apply X to q."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.y:1
msgid "Apply Y to q."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.z:1
msgid "Apply Z to q."
msgstr ""

