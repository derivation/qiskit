# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, Qiskit Development Team
# This file is distributed under the same license as the Qiskit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Qiskit \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-12 14:30+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../autodoc/qiskit.validation.fields.custom.rst:2
msgid "qiskit.validation.fields.custom module"
msgstr ""

#: of qiskit.validation.fields.custom:1
msgid "Fields custom to Terra to be used with Qiskit validated classes."
msgstr ""

#: of qiskit.validation.fields.custom.Complex:1
#: qiskit.validation.fields.custom.DictParameters:1
#: qiskit.validation.fields.custom.InstructionParameter:1
msgid "ベースクラス: :class:`qiskit.validation.base.ModelTypeValidator`"
msgstr ""

#: of qiskit.validation.fields.custom.Complex:1
msgid "Field for complex numbers."
msgstr ""

#: of qiskit.validation.fields.custom.Complex:3
msgid ""
"Field for parsing complex numbers: * deserializes to Python's `complex`. "
"* serializes to a tuple of 2 decimals `(real, imaginary)`"
msgstr ""

#: of qiskit.validation.fields.custom.DictParameters:1
msgid "Field for objects used in measurement kernel and discriminator parameters."
msgstr ""

#: of qiskit.validation.fields.custom.DictParameters.check_type:1
msgid "Validates a value against the correct type of the field."
msgstr ""

#: of qiskit.validation.fields.custom.DictParameters.check_type:3
msgid "It calls ``_expected_types`` to get a list of valid types."
msgstr ""

#: of qiskit.validation.fields.custom.DictParameters.check_type:5
msgid "Subclasses can do one of the following:"
msgstr ""

#: of qiskit.validation.fields.custom.DictParameters.check_type:7
msgid ""
"1. They can override the ``valid_types`` property with a tuple with the "
"expected types for this field."
msgstr ""

#: of qiskit.validation.fields.custom.DictParameters.check_type:10
msgid ""
"2. They can override the ``_expected_types`` method to return a tuple of "
"expected types for the field."
msgstr ""

#: of qiskit.validation.fields.custom.DictParameters.check_type:13
msgid "3. They can change ``check_type`` completely to customize validation."
msgstr ""

#: of qiskit.validation.fields.custom.DictParameters.check_type:16
msgid ""
"This method or the overrides must return the ``value`` parameter "
"untouched."
msgstr ""

#: of qiskit.validation.fields.custom.InstructionParameter:1
msgid "Field for objects used in instruction parameters."
msgstr ""

#: of qiskit.validation.fields.custom.InstructionParameter:3
msgid ""
"This field provides support for parsing objects of types that uses by "
"qobj.experiments.instructions.parameters: * basic Python types: complex, "
"int, float, str, list * ``numpy``: integer, float, ndarray * ``sympy``: "
"Symbol, Basic"
msgstr ""

#: of qiskit.validation.fields.custom.InstructionParameter:9
msgid ""
"Note that by using this field, serialization-deserialization round-"
"tripping becomes not possible, as certain types serialize to the same "
"Python basic type (for example, numpy.float and regular float). If "
"possible, it is recommended that more specific and defined fields are "
"used instead."
msgstr ""

#: of qiskit.validation.fields.custom.InstructionParameter.check_type:1
msgid "Customize check_type for handling containers."
msgstr ""

