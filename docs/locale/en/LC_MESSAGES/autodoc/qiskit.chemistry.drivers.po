# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, Qiskit Development Team
# This file is distributed under the same license as the Qiskit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Qiskit \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-12 14:30+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../autodoc/qiskit.chemistry.drivers.rst:2
msgid "qiskit.chemistry.drivers package"
msgstr ""

#: of qiskit.chemistry.drivers.BaseDriver:1
msgid "ベースクラス: :class:`abc.ABC`"
msgstr ""

#: of qiskit.chemistry.drivers.BaseDriver:1
msgid "Base class for Drivers."
msgstr ""

#: of qiskit.chemistry.drivers.BaseDriver:3
msgid ""
"This method should initialize the module and its configuration, and use "
"an exception if a component of the module is available."
msgstr ""

#: of qiskit.chemistry.drivers.BaseDriver.check_driver_valid:1
#: qiskit.chemistry.drivers.GaussianDriver.check_driver_valid:1
#: qiskit.chemistry.drivers.PSI4Driver.check_driver_valid:1
#: qiskit.chemistry.drivers.PyQuanteDriver.check_driver_valid:1
#: qiskit.chemistry.drivers.PySCFDriver.check_driver_valid:1
msgid "Checks if driver is ready for use. Throws an exception if not"
msgstr ""

#: of qiskit.chemistry.drivers.BaseDriver.configuration:1
msgid "Return driver configuration."
msgstr ""

#: of qiskit.chemistry.drivers.BaseDriver.init_from_input:1
#: qiskit.chemistry.drivers.GaussianDriver.init_from_input:1
#: qiskit.chemistry.drivers.HDF5Driver.init_from_input:1
#: qiskit.chemistry.drivers.PSI4Driver.init_from_input:1
#: qiskit.chemistry.drivers.PyQuanteDriver.init_from_input:1
#: qiskit.chemistry.drivers.PySCFDriver.init_from_input:1
msgid "Initialize via section dictionary."
msgstr ""

#: of qiskit.chemistry.drivers.BaseDriver.init_from_input
#: qiskit.chemistry.drivers.GaussianDriver.init_from_input
#: qiskit.chemistry.drivers.HDF5Driver.init_from_input
#: qiskit.chemistry.drivers.PSI4Driver.init_from_input
#: qiskit.chemistry.drivers.PyQuanteDriver.init_from_input
#: qiskit.chemistry.drivers.PySCFDriver.init_from_input
msgid "パラメータ"
msgstr ""

#: of qiskit.chemistry.drivers.BaseDriver.init_from_input:3
#: qiskit.chemistry.drivers.GaussianDriver.init_from_input:3
#: qiskit.chemistry.drivers.HDF5Driver.init_from_input:3
#: qiskit.chemistry.drivers.PSI4Driver.init_from_input:3
#: qiskit.chemistry.drivers.PyQuanteDriver.init_from_input:3
#: qiskit.chemistry.drivers.PySCFDriver.init_from_input:3
msgid "section dictionary"
msgstr ""

#: of qiskit.chemistry.drivers.BaseDriver.init_from_input
#: qiskit.chemistry.drivers.GaussianDriver.init_from_input
#: qiskit.chemistry.drivers.HDF5Driver.init_from_input
#: qiskit.chemistry.drivers.PSI4Driver.init_from_input
#: qiskit.chemistry.drivers.PyQuanteDriver.init_from_input
#: qiskit.chemistry.drivers.PySCFDriver.init_from_input
#: qiskit.chemistry.drivers.get_driver_class
#: qiskit.chemistry.drivers.get_driver_configuration
msgid "戻り値"
msgstr ""

#: of qiskit.chemistry.drivers.BaseDriver.init_from_input:6
#: qiskit.chemistry.drivers.GaussianDriver.init_from_input:6
#: qiskit.chemistry.drivers.HDF5Driver.init_from_input:6
#: qiskit.chemistry.drivers.PSI4Driver.init_from_input:6
#: qiskit.chemistry.drivers.PyQuanteDriver.init_from_input:6
#: qiskit.chemistry.drivers.PySCFDriver.init_from_input:6
msgid "Driver object"
msgstr ""

#: of qiskit.chemistry.drivers.BaseDriver.init_from_input
#: qiskit.chemistry.drivers.GaussianDriver.init_from_input
#: qiskit.chemistry.drivers.HDF5Driver.init_from_input
#: qiskit.chemistry.drivers.PSI4Driver.init_from_input
#: qiskit.chemistry.drivers.PyQuanteDriver.init_from_input
#: qiskit.chemistry.drivers.PySCFDriver.init_from_input
#: qiskit.chemistry.drivers.get_driver_class
#: qiskit.chemistry.drivers.get_driver_configuration
msgid "戻り値の型"
msgstr ""

#: of qiskit.chemistry.drivers.BasisType:1 qiskit.chemistry.drivers.UnitsType:1
msgid "ベースクラス: :class:`enum.Enum`"
msgstr ""

#: of qiskit.chemistry.drivers.BasisType:1 qiskit.chemistry.drivers.UnitsType:1
msgid "An enumeration."
msgstr ""

#: of qiskit.chemistry.drivers.refresh_drivers:1
msgid "Attempts to rediscover all driver modules"
msgstr ""

#: of qiskit.chemistry.drivers.register_driver:1
msgid "Registers a driver class :param cls: Driver class. :type cls: object"
msgstr ""

#: of qiskit.chemistry.drivers.register_driver:5
msgid "Returns:"
msgstr ""

#: of qiskit.chemistry.drivers.register_driver:6
msgid "name: driver name"
msgstr ""

#: of qiskit.chemistry.drivers.deregister_driver:1
msgid ""
"Remove driver from list of available drivers :param driver_name: name of "
"driver to unregister :type driver_name: str"
msgstr ""

#: of qiskit.chemistry.drivers.deregister_driver
#: qiskit.chemistry.drivers.get_driver_class
#: qiskit.chemistry.drivers.get_driver_configuration
msgid "raises"
msgstr ""

#: of qiskit.chemistry.drivers.deregister_driver:5
msgid "QiskitChemistryError if name is not registered."
msgstr ""

#: of qiskit.chemistry.drivers.get_driver_class:1
msgid ""
"Return the class object for the named module. :param driver_name: the "
"module name :type driver_name: str"
msgstr ""

#: of qiskit.chemistry.drivers.get_driver_class:5
msgid "class object for module"
msgstr ""

#: of qiskit.chemistry.drivers.get_driver_class:8
#: qiskit.chemistry.drivers.get_driver_configuration:8
msgid ":exc:`QiskitChemistryError` -- if module is unavailable"
msgstr ""

#: of qiskit.chemistry.drivers.get_driver_configuration:1
msgid ""
"Return the configuration for the named module. :param driver_name: the "
"module name :type driver_name: str"
msgstr ""

#: of qiskit.chemistry.drivers.get_driver_configuration:5
msgid "configuration dict"
msgstr ""

#: of qiskit.chemistry.drivers.local_drivers:1
msgid ""
"Accesses chemistry drivers names :returns: chemistry drivers names "
":rtype: names"
msgstr ""

#: of qiskit.chemistry.drivers.GaussianDriver:1
#: qiskit.chemistry.drivers.HDF5Driver:1 qiskit.chemistry.drivers.PSI4Driver:1
#: qiskit.chemistry.drivers.PyQuanteDriver:1
#: qiskit.chemistry.drivers.PySCFDriver:1
msgid "ベースクラス: :class:`qiskit.chemistry.drivers._basedriver.BaseDriver`"
msgstr ""

#: of qiskit.chemistry.drivers.GaussianDriver:1
msgid "Python implementation of a Gaussian 16 driver."
msgstr ""

#: of qiskit.chemistry.drivers.GaussianDriver:3
msgid ""
"This driver uses the Gaussian open-source Gaussian 16 interfacing code in"
" order to access integrals and other electronic structure information as "
"computed by G16 for the given molecule. The job control file, as provided"
" via our input file, is augmented for our needs here such as to have it "
"output a MatrixElement file."
msgstr ""

#: of qiskit.chemistry.drivers.HDF5Driver:1
msgid "Python implementation of a hdf5 driver."
msgstr ""

#: of qiskit.chemistry.drivers.PSI4Driver:1
msgid "Python implementation of a psi4 driver."
msgstr ""

#: of qiskit.chemistry.drivers.PyQuanteDriver:1
msgid "Python implementation of a PyQuante driver."
msgstr ""

#: of qiskit.chemistry.drivers.PySCFDriver:1
msgid "Python implementation of a PySCF driver."
msgstr ""

#: ../../autodoc/qiskit.chemistry.drivers.rst:10
msgid "Subpackages"
msgstr ""

#: ../../autodoc/qiskit.chemistry.drivers.rst:21
msgid "Submodules"
msgstr ""

