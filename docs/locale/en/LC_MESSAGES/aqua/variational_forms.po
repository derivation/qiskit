# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, Qiskit Development Team
# This file is distributed under the same license as the Qiskit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Qiskit \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-12 14:30+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../aqua/variational_forms.rst:5
msgid "Variational Forms"
msgstr ""

#: ../../aqua/variational_forms.rst:7
msgid ""
"In quantum mechanics, the *variational method* is one way of finding "
"approximations to the lowest energy eigenstate, or *ground state*, and "
"some excited states. This allows calculating approximate wave functions, "
"such as molecular orbitals.  The basis for this method is the "
"*variational principle*."
msgstr ""

#: ../../aqua/variational_forms.rst:12
msgid ""
"The variational method consists of choosing a *trial wave function*, or "
"*variational form*, that depends on one or more parameters, and finding "
"the values of these parameters for which the expectation value of the "
"energy is the lowest possible.  The wave function obtained by fixing the "
"parameters to such values is then an approximation to the ground state "
"wave function, and the expectation value of the energy in that state is "
"an upper bound to the ground state energy. Quantum variational "
"algorithms, such as :ref:`vqe`, apply the variational method. As such, "
"they require a variational form."
msgstr ""

#: ../../aqua/variational_forms.rst:20
msgid ""
"In Aqua, variational forms are pluggable entities.  Practitioners who "
"want to use Aqua mainly as a tool to experiment with :ref:`quantum-"
"algorithms`, and particularly with variational algorithms, will need to "
"make use of variational forms.  On the other hand, researchers who want "
"the advance the field of quantum computing, and design and develop new "
"variational forms, can do so by extending Aqua with new variational "
"forms, which will be dynamically discovered at run time and made "
"available for use by quantum variational algorithms."
msgstr ""

msgid "Extending the Variational Form Library"
msgstr ""

#: ../../aqua/variational_forms.rst:29
msgid ""
"Consistent with its unique  design, Aqua has a modular and extensible "
"architecture. Algorithms and their supporting objects, such as "
"variational forms for quantum variational algorithms, are pluggable "
"modules in Aqua. New variational forms for quantum variational algorithms"
" are typically installed in the ``qiskit_aqua/utils/variational_forms`` "
"folder and derive from the ``VariationalForm`` class. Aqua also allows "
"for :ref:`aqua-dynamically-discovered-components`: new components can "
"register themselves as Aqua extensions and be dynamically discovered at "
"run time independent of their location in the file system. This is done "
"in order to encourage researchers and developers interested in :ref"
":`aqua-extending` to extend the Aqua framework with their novel research "
"contributions."
msgstr ""

#: ../../aqua/variational_forms.rst:42
msgid ""
"When a variational form is used at run time, the ``__init__`` method will"
" be called with parameters as per the schema. The number of qubits will "
"also be supplied as the value of the parameter following ``self`` in the "
"method argument list. During initialization, in ``__init__``, the "
"variational form should set the number of parameters it has and their "
"bounds, as in the following example:"
msgstr ""

#: ../../aqua/variational_forms.rst:52
msgid ""
"These values will later be used by the variational algorithm in "
"conjunction with the optimizer. Note that the above example is correct "
"when none of qubits are unentangled."
msgstr ""

#: ../../aqua/variational_forms.rst:55
msgid ""
"The variational form can also indicate a *preferred initial point*.  This"
" feature is particularly useful when there are reasons to believe that "
"the solution point is close to a particular point, which can then be "
"provided as the preferred initial point.  As an example, when building "
"the dissociation profile of a molecule, it is likely that using the "
"previous computed optimal solution as the starting initial point for the "
"next interatomic distance is going to reduce the number of iterations "
"necessary for the variational algorithm to converge.  Aqua provides `a "
"tutorial detailing this use case <https://github.com/Qiskit/qiskit-"
"tutorials/blob/master/community/aqua/chemistry/h2_vqe_initial_point.ipynb>`__."
msgstr ""

#: ../../aqua/variational_forms.rst:63
msgid ""
":ref:`vqe` can, therefore, take an optional initial point from the user "
"as the value of the ``initial_point`` parameter, specified as a list of "
"``float`` values. The length of this list must match the number of the "
"parameters expected by the variational form being used. If the user does "
"not supply a preferred initial point, then VQE will look to the "
"variational form for a preferred value. If the variational form returns "
"``None``, then a random point will be generated within the parameter "
"bounds set, as per above. If the variational form provides ``None`` as "
"the lower bound, then VQE will default it to :math:`-2\\pi`; similarly, "
"if the variational form returns ``None`` as the upper bound, the default "
"value will be :math:`2\\pi`."
msgstr ""

#: ../../aqua/variational_forms.rst:74
msgid ""
"Section \":ref:`aqua-extending`\" provides more details on how to extend "
"Aqua with new components."
msgstr ""

msgid "Entangler Map Associated with a Variational Form"
msgstr ""

#: ../../aqua/variational_forms.rst:79
msgid ""
"A variational form is associated with an entangler map, which specifies "
"the entanglement of the qubits. An entangler map can be envisioned (and "
"that is also how it is implemented in Aqua) as a list such that each "
"element in the list is a list where the first element is source qubit "
":math:`k` and the second element is target qubit :math:`l`.  Indexes are "
"non-negative integer values from :math:`0` to :math:`q - 1`, where "
":math:`q` is the total number of qubits.  The following Python list shows"
" a possible entangler map: ``[[0, 1], [1, 2], [0, 3]]`` for :math:`q=4`."
msgstr ""

#: ../../aqua/variational_forms.rst:85
msgid "Currently, Aqua supplies the following variational forms:"
msgstr ""

#: ../../aqua/variational_forms.rst:87
msgid ":ref:`Ry`"
msgstr ""

#: ../../aqua/variational_forms.rst:88
msgid ":ref:`RyRz`"
msgstr ""

#: ../../aqua/variational_forms.rst:89
msgid ":ref:`Unitary Coupled Cluster Singles and Doubles (UCCSD)`"
msgstr ""

#: ../../aqua/variational_forms.rst:90
msgid ":ref:`SwapRz`"
msgstr ""

#: ../../aqua/variational_forms.rst:96
msgid "Ry"
msgstr ""

#: ../../aqua/variational_forms.rst:98
msgid ""
"The Ry trial wave function is layers of :math:`y` rotations with "
"entanglements. When none of qubits are unentangled to other qubits, the "
"number of optimizer parameters this form creates and uses is given by "
":math:`q \\times (d + 1)`, where :math:`q` is the total number of qubits "
"and :math:`d` is the depth of the circuit. Nonetheless, in some cases, if"
" an ``entangler_map`` does not include all qubits, that is, some qubits "
"are not entangled by other qubits. The number of parameters is reduced by"
" :math:`d \\times q' ` where :math:`q'` is the number of unentangled "
"qubits. This is because adding more parameters to the unentangled qubits "
"only introduce overhead without bring any benefit; furthermore, "
"theroetically, applying multiple Ry gates in a row can be reduced to one "
"Ry gate with the summed rotation angles."
msgstr ""

#: ../../aqua/variational_forms.rst:109
msgid ""
"The following allows a specific form to be configured in the "
"``variational_form`` section of the Aqua :ref:`aqua-input-file` when the "
"``name`` field is set to ``RY``:"
msgstr ""

#: ../../aqua/variational_forms.rst:114
msgid "The depth of the circuit:"
msgstr ""

#: ../../aqua/variational_forms.rst:120
msgid ""
"This parameter takes an ``int`` value greater than ``0``.  The default "
"value is ``3``."
msgstr ""

#: ../../aqua/variational_forms.rst:122
msgid "A ``str`` value representing the type of entanglement to use:"
msgstr ""

#: ../../aqua/variational_forms.rst:128
msgid ""
"Only two ``str`` values are supported: ``\"full\"`` and ``\"linear\"``, "
"corresponding to the *full* (or *all-to-all*) and *linear* (or *next-"
"neighbor coupling*) entangler maps, respectively. With full entanglement,"
" each qubit is entangled with all the others; with linear entanglement, "
"qubit :math:`i` is entangled with qubit :math:`i + 1`, for all :math:`i "
"\\in \\{0, 1, ... , q - 2\\}`, where :math:`q` is the total number of "
"qubits."
msgstr ""

#: ../../aqua/variational_forms.rst:134
msgid ""
"A list of list of non-negative ``int`` values specifying the entangler "
"map:"
msgstr ""

#: ../../aqua/variational_forms.rst:140
msgid ""
"The ``entanglement`` parameter defined above can be overridden by an "
"entangler map explicitly specified as the value of the ``entangler_map`` "
"parameter, if an entanglement map different from full or linear is "
"desired. As explained more generally above, the form of the map is a "
"list; each element in the list is a pair of a source qubit and a target "
"qubit index. Indexes are ``int`` values from :math:`0` to :math:`q-1`, "
"where :math:`q` is the total number of qubits, as in the following "
"example:"
msgstr ""

#: ../../aqua/variational_forms.rst:155
msgid ""
"The source qubit index is excluded from the target qubit index. In other "
"words, qubit :math:`i` cannot be both source and target qubit indexes."
msgstr ""

#: ../../aqua/variational_forms.rst:158
msgid ""
"Furthermore, by default, if the ``entangler_map`` parameter specifies "
"that :math:[`i, j`], where :math:`i,j \\in \\{0, 1, q-1\\}, i \\neq j`, "
"then it cannot also specify :math:[`j, i`].  A run-time error will be "
"generated if double entanglement is configured. This restriction can be "
"lifted programmatically by setting the ``allow_double_entanglement`` "
"boolean flag to ``True`` inside the ``validate_entangler_map`` method in "
"the ``entangler_map`` Application Programming Interface (API)."
msgstr ""

#: ../../aqua/variational_forms.rst:170
msgid ""
"When configured declaratively, Aqua and its domain specific applications "
"(:ref:`aqua-chemistry`, :ref:`aqua-ai`, :ref:`aqua-optimization` and :ref"
":`aqua-finance`) do not expose a configuration parameter in a "
"``VariationalForm`` object to set the number of qubits that will be used "
"in an experiment.  This is because, when it is used as a tool to execute "
"experiments, Aqua is working at a higher, more abstract level.  In such "
"cases, the number of qubits is computed internally at run time based on "
"the particular experiment, and passed programmatically to the "
"``__init__`` initialization method of the ``VariationalForm`` object. "
"Manually configuring the entangler map, therefore, requires knowing the "
"number of qubits :math:`q`, since the qubit indexes allowed in the "
"entangler map comfiguration can only take ``int`` values from :math:`0` "
"to :math:`q-1`. Providing an entangler map with indexes outside of this "
"range will generate a run-time error.  Therefore, caution should be used "
"when manually configuring the entangler map."
msgstr ""

#: ../../aqua/variational_forms.rst:188
msgid "The boolean value to skip applying gates on unentangled qubits:"
msgstr ""

#: ../../aqua/variational_forms.rst:194
msgid ""
"This default value is ``False``. If a given ``entangler_map`` does not "
"entangle some qubits, this might imply that the users would like to keep "
"as is. A use case is that users have another circuit works on that qubit "
"and would like to keep intact without varying it/them."
msgstr ""

msgid "Declarative Name"
msgstr ""

#: ../../aqua/variational_forms.rst:200
msgid ""
"When referring to Ry declaratively inside Aqua, its code ``name``, by "
"which Aqua dynamically discovers and loads it, is ``RY``."
msgstr ""

#: ../../aqua/variational_forms.rst:208
msgid "RyRz"
msgstr ""

#: ../../aqua/variational_forms.rst:210
msgid ""
"The RyRz trial wave function is layers of :math:`y` plus :math:`z` "
"rotations with entanglements. When none of qubits are unentangled to "
"other qubits, the number of optimizer parameters this form creates and "
"uses is given by :math:`q \\times (d + 1) \\times 2`, where :math:`q` is "
"the total number of qubits and :math:`d` is the depth of the circuit. "
"Nonetheless, in some cases, if an ``entangler_map`` does not include all "
"qubits, that is, some qubits are not entangled by other qubits. The "
"number of parameters is reduced by :math:`d \\times q' \\times 2` where "
":math:`q'` is the number of unentangled qubits. This is because adding "
"more parameters to the unentangled qubits only introduce overhead without"
" bring any benefit; furthermore, theroetically, applying multiple Ry and "
"Rz gates in a row can be reduced to one Ry gate and one Rz gate with the "
"summed rotation angles."
msgstr ""

#: ../../aqua/variational_forms.rst:222
msgid ""
"The parameters of RyRz can be configured after selecting ``RYRZ`` as the "
"value of the ``name`` field in the ``variational_form`` section of the "
"Aqua :ref:`input-file`.  These parameters are ``depth``, "
"``entanglement``, ``entangler_map``, and ``skip_unentangled_qubits`` --- "
"the same as those of :ref:`Ry`."
msgstr ""

#: ../../aqua/variational_forms.rst:230
msgid ""
"When referring to RyRz declaratively inside Aqua, its code ``name``, by "
"which Aqua dynamically discovers and loads it, is ``RYRZ``."
msgstr ""

#: ../../aqua/variational_forms.rst:238
msgid "Unitary Coupled Cluster Singles and Doubles (UCCSD)"
msgstr ""

#: ../../aqua/variational_forms.rst:240
msgid ""
"UCCSD lends itself to chemistry experiments and it is, therefore, "
"suitable for use in :ref:`aqua-chemistry`. However, it is still a general"
" variational form which can theoretically be used also in more general "
"experiments."
msgstr ""

#: ../../aqua/variational_forms.rst:246
msgid ""
"The applicability of UCCSD to chemistry is described in `arXiv:1805.04340"
" <https://arxiv.org/abs/1805.04340>`__."
msgstr ""

msgid "Particle Preservation"
msgstr ""

#: ../../aqua/variational_forms.rst:251 ../../aqua/variational_forms.rst:501
msgid ""
"Particle preservation plays an important role when computing the excited "
"states of a molecule.  Without particle preservation, the result of the "
"computation of the excited states would be polluted with the presence of "
"ionized states, where some of the initial particles may be missing, or "
"additional particles would be accounted for that were not there in the "
"initial configuration."
msgstr ""

#: ../../aqua/variational_forms.rst:257
msgid ""
"In general, Unitary Coupled Cluster (UCC) preserves the number of "
"particles across the computation and, consequently, the number of "
"electrons.  This is true, in particular, for UCCSD. Therefore, the "
"initial state should be prepared with the desired number of electrons in "
"the :ref:`hartree-fock` state. For a neutral molecule, the number of "
"electrons equals the number of protons."
msgstr ""

#: ../../aqua/variational_forms.rst:265
msgid ""
"Note that the UCCSD implementation does not require the use of Trotter "
"steps in the expansion of the cluster operators.  Assuming that "
":math:`T_1` and :math:`T_2` are the cluster operators for the single and "
"double excitations, respectively, the Trotter expansion can be written as"
" :math:`e^{(T_1-{T_1}^\\dagger)+(T_2-{T_2}^\\dagger)}`. This amount can "
"be approximated as "
":math:`\\left(e^{\\left(T_1-{T_1}^\\dagger\\right)/n}e^{\\left(T_2-{T_2}^\\dagger\\right)/n}\\right)^n`."
" This approximation becomes exact in the limit :math:`n \\rightarrow "
"\\infty`. However, `it has been shown "
"<https://arxiv.org/abs/1805.04340>`__ that the variational approach gives"
" good accuracy with just a single Trotter step."
msgstr ""

#: ../../aqua/variational_forms.rst:278
msgid ""
"Rather than allowing single and double excitations with all particles and"
" all unoccupied orbitals, the particles and unoccupied orbitals can be "
"restricted to a so called *active space*. This allows UCCSD to have a "
"simpler form and correspondingly a shorter circuit. While simpler, this "
"will result in an approximation of the exact value. The acceptability of "
"such approximation depends on the active space chosen."
msgstr ""

#: ../../aqua/variational_forms.rst:284
msgid "The following parameters allow a specific form to be configured:"
msgstr ""

#: ../../aqua/variational_forms.rst:286
msgid "The depth of the circuit in use:"
msgstr ""

#: ../../aqua/variational_forms.rst:292
msgid ""
"This parameter takes a positive ``int`` value, representing the depth of "
"the circuit. The default value is ``1``. Differently from the heuristic "
"trial wave function approach, in UCCSD we do not need repetition of the "
"circuit."
msgstr ""

#: ../../aqua/variational_forms.rst:297
msgid ""
"The total number of spin orbitals for which the variational form is to be"
" created:"
msgstr ""

#: ../../aqua/variational_forms.rst:303 ../../aqua/variational_forms.rst:311
msgid "This parameter expects a positive ``int`` value."
msgstr ""

#: ../../aqua/variational_forms.rst:305
msgid ""
"The total number of particles for which the variational form is to be "
"created:"
msgstr ""

#: ../../aqua/variational_forms.rst:314
msgid "The desired :ref:`translators` from fermions to qubits:"
msgstr ""

#: ../../aqua/variational_forms.rst:320
msgid ""
"This parameter takes a value of type ``str``.  Currently, only the three "
"values above are supported, but new qubit mappings can easily be plugged "
"in. Specifically:"
msgstr ""

#: ../../aqua/variational_forms.rst:324
msgid "``jordan_wigner`` corresponds to the :ref:`jordan-wigner` transformation."
msgstr ""

#: ../../aqua/variational_forms.rst:325
msgid ""
"``parity``, the default value for the ``qubit_mapping`` parameter, "
"corresponds to the :ref:`parity` mapping transformation. When this "
"mapping is selected, it is possible to reduce by 2 the number of qubits "
"required by the computation without loss of precision by setting the "
"``two_qubit_reduction`` parameter to ``True``, as explained next."
msgstr ""

#: ../../aqua/variational_forms.rst:330
msgid ""
"``bravyi_kitaev`` corresponds to the :ref:`bravyi-kitaev` transformation,"
" also known as *binary-tree-based qubit mapping*."
msgstr ""

#: ../../aqua/variational_forms.rst:333
msgid ""
"A Boolean flag specifying whether or not to apply the precision-"
"preserving two-qubit reduction optimization:"
msgstr ""

#: ../../aqua/variational_forms.rst:340
msgid ""
"The default value for this parameter is ``True``. When the parity mapping"
" is selected, and ``two_qubit_reduction`` is set to ``True``, then the "
"operator can be reduced by two qubits without loss of precision."
msgstr ""

#: ../../aqua/variational_forms.rst:346
msgid ""
"If the mapping from fermionic to qubit is set to something other than the"
" parity mapping, the value assigned to ``two_qubit_reduction`` is "
"ignored."
msgstr ""

#: ../../aqua/variational_forms.rst:349
msgid "The number of time slices to use in the expansion:"
msgstr ""

#: ../../aqua/variational_forms.rst:355
msgid ""
"This parameter expects a non-negative ``int`` value.  The default value "
"is ``1``."
msgstr ""

#: ../../aqua/variational_forms.rst:357
msgid ""
"A list of occupied orbitals whose particles are to be used in the "
"creation of single and double excitations:"
msgstr ""

#: ../../aqua/variational_forms.rst:364
msgid ""
"This parameter expects to be assigned a list of ``int`` values. By "
"default, ``active_occupied`` is assigned ``None``, corresponding to a "
"configuration in which none of occupied orbitals is excluded from the "
"computation. Spin orbitals are as in the diagram below, where ``No`` and "
"``Nv`` indicate the number of active occupied alpha orbitals and active "
"unoccupied virtual alpha orbitals, respectively."
msgstr ""

#: ../../aqua/variational_forms.rst:382
msgid ""
"The ``int`` values in the ``active_occupied`` list are orbital indices "
"ranging from ``0`` to ``n``, where ``n = No - 1``. The user needs only to"
" supply the indexes of the active occupied alpha orbitals desired in the "
"computation, as the indexes of the active occupied beta orbitals can be "
"computed. Indexes can be given with negative numbers too, in which case "
"``-1`` is the highest occupied orbital, ``-2`` the next one down, and so "
"on."
msgstr ""

#: ../../aqua/variational_forms.rst:389
msgid ""
"A list of active unoccupied orbitals to be used in the creation of single"
" and double excitations:"
msgstr ""

#: ../../aqua/variational_forms.rst:395
msgid ""
"This parameter expects to be assigned a list of ``int`` values.  By "
"default, the default value assigned to `active_unoccupied` is ``None``, "
"which corresponds to the configuration in which none of the unoccupied "
"orbitals is excluded from the computation. Particles from the "
"``active_occupied`` list are only allowed to be excited into orbitals "
"defined by the ``active_unoccupied`` list."
msgstr ""

#: ../../aqua/variational_forms.rst:401
msgid ""
"Assuming that ``Nv`` is the number of active unoccupied virtual alpha "
"orbitals, the ``int`` values in the ``active_unoccupied`` list are "
"orbital indices ranging from ``0`` to ``m``, where ``m = Nv - 1``. The "
"user needs only to supply the indexes of the active unoccupied virtual "
"alpha orbitals, as the indexes of the active unoccupied virtual beta "
"orbitals can be computed. Indexes can be given with negative numbers too,"
" in which case ``-1`` is the highest unoccupied virtual orbital, ``-2`` "
"the next one down, and so on."
msgstr ""

#: ../../aqua/variational_forms.rst:411
msgid ""
"When executing an Aqua Chemistry problem, the user can configure two "
"parameters in the ``operator`` section of the Aqua Chemistry :ref:`aqua-"
"chemistry-input-file`: ``freeze_core`` and ``orbital_reduction``.  These "
"two parameters effectively allow the user to specify a set of orbitals to"
" be removed from the computation of the molecular energy. Thus the "
"orbitals configurable through UCCSD do not include the orbitals removed "
"via the ``freeze_core`` and ``orbital_reduction`` parameters.  The "
"orbitals remaining after that removal are reindexed and  partitioned "
"according to the following:"
msgstr ""

#: ../../aqua/variational_forms.rst:420
msgid "The indexes in the ``active_occupied`` list range from ``0`` to ``n``."
msgstr ""

#: ../../aqua/variational_forms.rst:421
msgid "The indexes in the ``active_unoccupied`` list range from ``0`` to ``m``."
msgstr ""

#: ../../aqua/variational_forms.rst:425
msgid ""
"When the ``auto_substitutions`` flag in the ``problem`` section of the "
"Aqua Chemistry :ref:`aqua-chemistry-input-file` is set to ``True``, which"
" is the default, the values of parameters ``num_particles`` and "
"``num_orbitals`` are automatically computed by Aqua Chemistry when "
"``UCCSD`` is selected as the value of the ``name`` parameter in the "
"``variational_forms`` section. As such, their configuration is disabled; "
"the user will not be required, or even allowed, to assign values to these"
" two parameters.  This is also reflected in the :ref:`aqua-chemistry-"
"gui`, where these parameters will be grayed out and uneditable as long as"
" ``auto_substitutions`` is set to ``True`` in the ``problem`` section. "
"Furthermore, Aqua Chemistry automatically sets parameters "
"``qubit_mapping`` and ``two_qubit_reduction`` in section "
"``variational_form`` when ``UCCSD`` is selected as the value of the "
"``name`` parameter.  Specifically, Aqua Chemistry sets ``qubit_mapping`` "
"and ``two_qubit_reduction`` to the values the user assigned to them in "
"the ``operator`` section of the input file in order to enforce "
"parameter/value matching across these different sections.  As a result, "
"the user will only have to configure ``qubit_mapping`` and "
"``two_qubit_reduction`` in the ``operator`` section; the configuration of"
" these two parameters in section ``variational_form`` is disabled, as "
"reflected also in the GUI, where the values of these two parameters are "
"only editable in the ``operator`` section, and otherwise grayed out in "
"the ``variational_form`` sections."
msgstr ""

#: ../../aqua/variational_forms.rst:447
msgid ""
"On the other hand, if ``auto_substitutions`` is set to ``False``, then "
"the end user has the full responsibility for the entire configuration."
msgstr ""

#: ../../aqua/variational_forms.rst:453
msgid ""
"Setting ``auto_substitutions`` to ``False``, while made possible for "
"experimental purposes, should only be done with extreme care, since it "
"could easily lead to misconfiguring the entire experiment and producing "
"imprecise results."
msgstr ""

#: ../../aqua/variational_forms.rst:460
msgid ""
"When referring to UCCSD declaratively inside Aqua, its code ``name``, by "
"which Aqua dynamically discovers and loads it, is ``UCCSD``."
msgstr ""

#: ../../aqua/variational_forms.rst:467
msgid "SwapRz"
msgstr ""

#: ../../aqua/variational_forms.rst:469
msgid ""
"This trial wave function is layers of swap plus :math:`z` rotations with "
"entanglements. It was designed principally to be a particle-preserving "
"variational form for :ref:`aqua-chemistry`."
msgstr ""

#: ../../aqua/variational_forms.rst:475
msgid ""
"Particle preservation with SwapRz is not guaranteed unless SwapRz is used"
" in conjunction with the :ref:`jordan-wigner` qubit mapping and the :ref"
":`hartree-fock` initial state."
msgstr ""

#: ../../aqua/variational_forms.rst:478
msgid ""
"The parameters of SwapRz can be configured after selecting ``SWAPRZ`` as "
"the value of the ``name`` field in the ``variational_form`` section of "
"the Aqua :ref:`aqua-input file`.  These parameters are ``depth``. "
"``entanglement``, ``entangler_map``, and ``skip_unentangled_qubits`` --- "
"the same as those of :ref:`Ry`."
msgstr ""

#: ../../aqua/variational_forms.rst:484
msgid ""
"Based on the notation introduced above for the entangler map associated "
"with a variational form, for the case of none of qubits are unentangled "
"to other qubits, the number of optimizer parameters SwapRz creates and "
"uses is given by :math:`q + d \\times \\left(q + "
"\\sum_{k=0}^{q-1}|D(k)|\\right)`, where :math:`|D(k)|` denotes the "
"*cardinality* of :math:`D(k)` or, more precisely, the *length* of "
":math:`D(k)` (since :math:`D(k)` is not just a set, but a list). "
"Nonetheless, in some cases, if an ``entangler_map`` does not include all "
"qubits, that is, some qubits are not entangled by other qubits. The "
"number of parameters is reduced by :math:`d \\times q' ` where :math:`q'`"
" is the number of unentangled qubits. This is because adding more Rz "
"gates to the unentangled qubits only introduce overhead without bring any"
" benefit; furthermore, theroetically, applying multiple Rz gates in a row"
" can be reduced to one Rz gate with the summed rotation angles."
msgstr ""

#: ../../aqua/variational_forms.rst:509
msgid ""
"When referring to SwapRz declaratively inside Aqua, its code ``name``, by"
" which Aqua dynamically discovers and loads it, is ``SWAPRZ``."
msgstr ""

