# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, Qiskit Development Team
# This file is distributed under the same license as the Qiskit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Qiskit \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-12 14:30+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../terra/transpiler/about/pass_managers.rst:5
msgid "Pass Managers"
msgstr ""

#: ../../terra/transpiler/about/pass_managers.rst:7
msgid "目次"
msgstr ""

#: ../../terra/transpiler/about/pass_managers.rst:9
msgid ""
"A ``PassManager`` instance determines the schedule for running registered"
" passes."
msgstr ""

#: ../../terra/transpiler/about/pass_managers.rst:11
msgid ""
"The pass manager is in charge of deciding the next pass to run, not the "
"pass itself."
msgstr ""

#: ../../terra/transpiler/about/pass_managers.rst:13
msgid ""
"Registering passes in the pass manager pipeline is done by the ``append``"
" method."
msgstr ""

#: ../../terra/transpiler/about/pass_managers.rst:15
msgid ""
"While registering, you can specify basic control primitives over each "
"pass (conditionals and loops)."
msgstr ""

#: ../../terra/transpiler/about/pass_managers.rst:17
msgid "Options to control the scheduler:"
msgstr ""

#: ../../terra/transpiler/about/pass_managers.rst:19
msgid ""
"Passes can have arguments at init time that can affect their scheduling. "
"If you want to set properties related to how the pass is run, you can do "
"so by accessing these properties (e.g. ``pass_.max_iteration = 10``)."
msgstr ""

#: ../../terra/transpiler/about/pass_managers.rst:23
msgid ""
"Options set from the pass manager take more precedence over those set at "
"the time of adding a pass set, and those take more precedence over the "
"options of each individual pass."
msgstr ""

#: ../../terra/transpiler/about/pass_managers.rst:27
msgid ""
"All of Qiskit's transpiler pass managers are accessible from "
"``qiskit.transpiler``. The ``PassManager`` class is documented "
":py:mod:`here <qiskit.transpiler.passmanager>`."
msgstr ""

#: ../../terra/transpiler/about/pass_managers.rst:34
msgid "Pass Dependency Control"
msgstr ""

#: ../../terra/transpiler/about/pass_managers.rst:36
msgid ""
"The transpiler architecture allows passes to declare two kinds of "
"dependency control to the pass manager:"
msgstr ""

#: ../../terra/transpiler/about/pass_managers.rst:39
msgid ""
"``requires`` are passes that need to have been run before executing the "
"current pass."
msgstr ""

#: ../../terra/transpiler/about/pass_managers.rst:41
msgid "``preserves`` are passes that are not invalidated by the current pass."
msgstr ""

#: ../../terra/transpiler/about/pass_managers.rst:42
msgid "Analysis passes preserve all."
msgstr ""

#: ../../terra/transpiler/about/pass_managers.rst:43
msgid ""
"The ``requires`` and ``preserves`` lists contain concrete instances of "
"other passes (i.e. with specific pass parameters)."
msgstr ""

#: ../../terra/transpiler/about/pass_managers.rst:50
msgid "Control Flow Plugins"
msgstr ""

#: ../../terra/transpiler/about/pass_managers.rst:52
msgid ""
"By default, there are two control flow plugins included in the default "
"pass manager: ``do_while`` and ``conditional`` (see **Fixed Point** and "
"**Conditional** use cases). You might want to add more control flow "
"plugins. For example, a for-loop can be implemented in the following way:"
msgstr ""

#: ../../terra/transpiler/about/pass_managers.rst:70
msgid "The plugin is added to the pass manager in this way:"
msgstr ""

#: ../../terra/transpiler/about/pass_managers.rst:77
msgid ""
"This allows to use the parameter ``do_x_times``, which needs to be a "
"callable. In this case, this is used to parametrized the plugin, so it "
"will for-loop 3 times."
msgstr ""

#: ../../terra/transpiler/about/pass_managers.rst:89
msgid "Use Cases"
msgstr ""

#: ../../terra/transpiler/about/pass_managers.rst:93
msgid "Simple Chain with Dependencies"
msgstr ""

#: ../../terra/transpiler/about/pass_managers.rst:95
msgid ""
"The ``CXCancellation`` requires and preserves ``Decompose``. Same for "
"``Optimize1qGates``. The pass ``BasicSwap`` requires extra information "
"for running (the ``coupling_map``, in this case)."
msgstr ""

#: ../../terra/transpiler/about/pass_managers.rst:110
msgid ""
"Given the above, the pass manager executes the following sequence of "
"passes:"
msgstr ""

#: ../../terra/transpiler/about/pass_managers.rst:112
msgid "``ToffoliDecompose``, because it is required by ``CXCancellation``."
msgstr ""

#: ../../terra/transpiler/about/pass_managers.rst:113
msgid "``CxCancellation``"
msgstr ""

#: ../../terra/transpiler/about/pass_managers.rst:114
msgid ""
"``Optimize1qGates``, because even though ``Optimize1qGates`` also "
"requires ``Decompose``, the ``CXCancellation`` preserved it, so no need "
"to run it again."
msgstr ""

#: ../../terra/transpiler/about/pass_managers.rst:117
msgid ""
"``ToffoliDecompose``, because ``Mapper`` did not preserve ``Decompose`` "
"and it is required by ``CxCancellation``"
msgstr ""

#: ../../terra/transpiler/about/pass_managers.rst:123
msgid "Same Pass with Different Parameters (Pass Identity)"
msgstr ""

#: ../../terra/transpiler/about/pass_managers.rst:125
msgid ""
"A pass behavior can be heavily influenced by its parameters. For example,"
" unrolling using some basis gates is totally different than unrolling to "
"different gates. And a PassManager might use both."
msgstr ""

#: ../../terra/transpiler/about/pass_managers.rst:136
msgid "where (from ``qelib1.inc``):"
msgstr ""

#: ../../terra/transpiler/about/pass_managers.rst:147
msgid ""
"For this reason, the identity of a pass is given by its name and "
"parameters."
msgstr ""

#: ../../terra/transpiler/about/pass_managers.rst:152
msgid "While Loop up to Fixed Point"
msgstr ""

#: ../../terra/transpiler/about/pass_managers.rst:154
msgid ""
"There are cases when one or more passes have to be run repeatedly, until "
"a condition is fulfilled."
msgstr ""

#: ../../terra/transpiler/about/pass_managers.rst:163
msgid ""
"The control argument ``do_while`` will run these passes until the "
"callable returns ``False``. The callable always takes in one argument, "
"the pass manager's property set. In this example, ``Depth`` is an "
"analysis pass that updates the property ``depth`` in the property set."
msgstr ""

#: ../../terra/transpiler/about/pass_managers.rst:172
msgid "Conditional"
msgstr ""

#: ../../terra/transpiler/about/pass_managers.rst:174
msgid ""
"The pass manager developer can avoid one or more passes by making them "
"conditional (on a property in the property set):"
msgstr ""

#: ../../terra/transpiler/about/pass_managers.rst:184
msgid ""
"The ``CheckMap`` is an analysis pass that updates the property "
"``is_swap_mapped``. If ``TrivialLayout`` could map the circuit to the "
"coupling map, the ``BasicSwap`` is unnecessary."
msgstr ""

#: ../../terra/transpiler/about/pass_managers.rst:192
msgid "Idempotent Passes"
msgstr ""

#: ../../terra/transpiler/about/pass_managers.rst:194
msgid ""
"If a pass is idempotent, the transpiler can use that property to perform "
"certain optimizations. A pass is idempotent if ``pass.run(pass.run(dag)) "
"== pass.run(dag)``. Analysis passes are idempotent by definition, since "
"they do not modify the DAG. Transformation passes can declare themselves "
"as idempotent by annotating as *self-preserve* in the following way "
"(``<-``):"
msgstr ""

#: ../../terra/transpiler/about/pass_managers.rst:211
msgid "Misbehaving Passes"
msgstr ""

#: ../../terra/transpiler/about/pass_managers.rst:213
msgid ""
"If an analysis pass attempts to modify the DAG or if a transformation "
"pass tries to set a property in the property set of the pass manager, a "
"``TranspilerAccessError`` will be raised."
msgstr ""

