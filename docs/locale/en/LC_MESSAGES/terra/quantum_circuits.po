# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, Qiskit Development Team
# This file is distributed under the same license as the Qiskit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Qiskit \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-12 14:30+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../terra/quantum_circuits.rst:3
msgid "Circuits and Registers"
msgstr ""

#: ../../terra/quantum_circuits.rst:5
msgid ""
"The ``QuantumCircuit``, ``QuantumRegister``, and ``ClassicalRegister`` "
"are the main objects for Qiskit Terra. You can create custom circuits, "
"combine existing circuits, manipulate a circuit's structure, and index "
"into circuit elements."
msgstr ""

#: ../../terra/quantum_circuits.rst:10
msgid "The following imports will be used in the examples below."
msgstr ""

#: ../../terra/quantum_circuits.rst:23
msgid "Creating Registers"
msgstr ""

#: ../../terra/quantum_circuits.rst:25
msgid "Quantum and classical registers are declared using the following:"
msgstr ""

#: ../../terra/quantum_circuits.rst:35
msgid ""
"The name is optional. If not given Qiskit will name it ``qi`` where ``i``"
" is an integer which will count from 0. The name and size can be returned"
" using the following:"
msgstr ""

#: ../../terra/quantum_circuits.rst:49
msgid "You can test if the register are the same or different."
msgstr ""

#: ../../terra/quantum_circuits.rst:79
msgid "Creating Circuits"
msgstr ""

#: ../../terra/quantum_circuits.rst:81
msgid ""
"Quantum Circuits are made using registers. Either when initiated or by "
"using the ``add_register`` command."
msgstr ""

#: ../../terra/quantum_circuits.rst:94
msgid "is the same as"
msgstr ""

#: ../../terra/quantum_circuits.rst:111
msgid ""
"The order of registers in the list is the order they are initiated or "
"added **not** the tensor product for quantum registers."
msgstr ""

#: ../../terra/quantum_circuits.rst:130
msgid ""
"The circuit drawer has the last register added at the bottom and if we "
"add a new register it will add it to the bottom of the circuit."
msgstr ""

#: ../../terra/quantum_circuits.rst:133
msgid ""
"Circuits can also be created without predefined registers. Instead, you "
"can supply the the number of qubits (required) and the number of "
"classical bits (optional) to ``QuantumCircuit()``."
msgstr ""

#: ../../terra/quantum_circuits.rst:143
msgid ""
"With this syntax, registers are created automatically and can be accessed"
" as properties of the ``QuantumCircuit``."
msgstr ""

#: ../../terra/quantum_circuits.rst:156
msgid ""
"Qubits and bits can be indexed directly, without indexing into a "
"``QuantumRegister``. A gate's expected argument types will determine "
"whether an index refers to a qubit or a bit. For example, ``cx`` expects "
"a qubit followed by a bit."
msgstr ""

#: ../../terra/quantum_circuits.rst:176
msgid ""
"The indexing method above works for ``QuantumCircuit`` objects "
"constructed with or without predefined ``QuantumRegister`` objects."
msgstr ""

#: ../../terra/quantum_circuits.rst:179
msgid ""
"For circuits with multiple registers, index ordering will correspond to "
"the order registers were added to the circuit, and can be verified by "
"inspecting the circuit's ``qubits`` and ``clbits`` properties."
msgstr ""

#: ../../terra/quantum_circuits.rst:205
msgid "Concatenating Circuits"
msgstr ""

#: ../../terra/quantum_circuits.rst:207
msgid ""
"In many situations you may have two circuits that you want to concatenate"
" together to form a new circuit. This is very useful when one circuit has"
" no measurements and the final circuit represents a measurement."
msgstr ""

#: ../../terra/quantum_circuits.rst:264
msgid "The new register is added to the circuit:"
msgstr ""

#: ../../terra/quantum_circuits.rst:274
msgid "We have also overloaded ``+=`` to the ``QuantumCircuit`` object:"
msgstr ""

#: ../../terra/quantum_circuits.rst:287
msgid "Examining Circuit Results"
msgstr ""

#: ../../terra/quantum_circuits.rst:289
msgid ""
"In the circuit output, the most significant bit (MSB) is to the left and "
"the least significant bit (LSB) is to the right (i.e.Â we follow the "
"regular computer science little endian ordering). In this example:"
msgstr ""

#: ../../terra/quantum_circuits.rst:300
msgid ""
"qqubit register :math:`Q_0` is prepared in the state :math:`|10\\rangle` "
"and :math:`Q_1` is in the state :math:`|01\\rangle` giving a total state "
":math:`|0110\\rangle` (:math:`Q1\\otimes Q0`)."
msgstr ""

#: ../../terra/quantum_circuits.rst:306
msgid ""
"The tensor order in Qiskit goes as :math:`Q_n \\otimes .. Q_1 \\otimes "
"Q_0`"
msgstr ""

#: ../../terra/quantum_circuits.rst:308
msgid ""
"That is the four qubit statevector of length 16 with the 6th element "
"(``int('0110',2)=6``) being one. Note the element count starts from zero."
msgstr ""

#: ../../terra/quantum_circuits.rst:326
msgid ""
"To check the fidelity of this state with the ``basis_state`` in Qiskit "
"Terra you can use:"
msgstr ""

#: ../../terra/quantum_circuits.rst:342
msgid ""
"We can also use Qiskit Terra to make the unitary operator representing "
"the circuit (provided there are no measurements). This will be a "
":math:`16\\times16` matrix equal to :math:`I\\otimes X\\otimes X\\otimes "
"I`. To check this is correct we can use the ``Pauli`` class and the "
"``process_fidelity`` function."
msgstr ""

#: ../../terra/quantum_circuits.rst:364
msgid ""
"To map the information of the quantum state to the classial world we have"
" to use the example with measurements ``qc``:"
msgstr ""

#: ../../terra/quantum_circuits.rst:381
msgid ""
"This will map the quantum state to the classical world and since the "
"state has no superpositions it will be deterministic and equal to ``'01 "
"10'``. Here a space is used to separate the registers."
msgstr ""

#: ../../terra/quantum_circuits.rst:398
msgid ""
"To show that it does not matter how you add the registers we run the same"
" as above on the second example circuit:"
msgstr ""

#: ../../terra/quantum_circuits.rst:452
msgid "Determining Circuit Resources"
msgstr ""

#: ../../terra/quantum_circuits.rst:454
msgid ""
"A ``QuantumCircuit`` object provides methods for inquiring its resource "
"use. This includes the number of qubits, operations, and a few other "
"things."
msgstr ""

